{"pageProps":{"index":{"id":"0019","content":"<pre><code>Author: Richard A. O'Keefe &lt;ok(at)cs(dot)otago(dot)ac(dot)nz&gt;\nStatus: Draft\nType: Standards Track\nErlang-Version: R12B-4\nCreated: 14-Aug-2008\nPost-History:\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 19: <a href=\"eep-0019.md\" title=\"EEP Source\"> Comprehension multigenerators</a></h2>\n\n<h1>Abstract</h1>\n\n<p>Add Clean-inspired multi-sequence generators to comprehensions,\nmaking code more intention-revealing and reducing the need to zip.</p>\n\n<p>This is related to <a href=\"/eeps/eep-0012\" title=\"EEP 12\">EEP 12</a>, but is independent of it.</p>\n\n<h1>Specification</h1>\n\n<p>Currently, Erlang has</p>\n\n<pre><code>Pattern &lt;- Expr\n</code></pre>\n\n<p>to enumerate over the elements of a single list and</p>\n\n<pre><code>Pattern &lt;= Expr\n</code></pre>\n\n<p>to enumerate over a binary.  <a href=\"/eeps/eep-0012\" title=\"EEP 12\">EEP 12</a> adds</p>\n\n<pre><code>Pattern [&lt;-] List\nPattern {&lt;-} Tuple\nPattern &lt;&lt;&lt;-&gt;&gt; Binary\n</code></pre>\n\n<p>This proposal changes that to</p>\n\n<pre><code>generator: term_generator | binary_generator;\nbinary_generator: pattern '&lt;=' expression;\nterm_generator: term_generator '&amp;&amp;' term_generator\n              | pattern '&lt;-' expression;\n</code></pre>\n\n<p>if we otherwise stick with current Erlang, or</p>\n\n<pre><code>generator: term_generator | binary_generator;\nbinary_generator: pattern '&lt;=' expression\n                | pattern '&lt;&lt;' '&lt;-' '&gt;&gt;' expression;\nterm_generator: term_generator '&amp;&amp;' term_generator\n              | pattern '&lt;-' expression\n              | pattern '[' '&lt;-' ']' expression\n              | pattern '{' '&lt;-' '}' expression;\n</code></pre>\n\n<p>if we go with <a href=\"/eeps/eep-0012\" title=\"EEP 12\">EEP 12</a>.</p>\n\n<p>Roughly speaking, ignoring errors and side effects,\nthe effect of <code>P1 &lt;- E1 &amp;&amp; ... Pn &lt;- En</code>\nis the effect of <code>{P1,...,Pn} &lt;- zip(E1, ..., En)</code>\nwhere</p>\n\n<pre><code>zip([X1|Xs1], ..., [Xn|Xsn]) -&gt;\n    [{X1,...,Xn} | zip(Xs1, ..., Xsn)];\nzip([], ..., []) -&gt;\n    [].\n</code></pre>\n\n<p>However, it is expected that there will NOT be any extra list\nor tuples created by the implementation; this specifies the\neffect but NOT how it is to be implemented.</p>\n\n<p>The effect of a term generator using the new notations of EEP 12\nis that which would be obtained by first replacing</p>\n\n<pre><code>P {&lt;-} E   with   P &lt;- tuple_to_list(E)\nP [&lt;-] E   with   P &lt;- E\n</code></pre>\n\n<p>and then applying the translation above.</p>\n\n<p>In the presence of errors, the behaviour of &amp;&amp; is not precisely\nthe same as using zip.  We need to specify the actual behaviour\nmore precisely.  For brevity, I ignore binary enumeration.  Both\ntuple enumeration and tuple comprehension are currently defined\nby rewriting to plain list comprehension, so that's all we need\nto worry about for now.</p>\n\n<p>A list comprehension has the form <code>[E || C1, ..., Cn]</code>\nwhere each Ci is</p>\n\n<ul>\n<li>a generator <code>Pattern &lt;- List_Expression</code></li>\n<li>a binding   <code>Pattern =  Any_Expression</code></li>\n<li>a \"guard\"   <code>Other_Expression</code> that should give true or false.</li>\n</ul>\n\n<p>This acts like</p>\n\n<pre><code>R = [],\n&lt;| E || [C1, ..., Cn] |&gt;(R),\nreverse(R)\n</code></pre>\n\n<p>where</p>\n\n<pre><code>&lt;| E || [] |&gt;(R)\n=&gt;  R = [E | R]             % reassign R\n\n&lt;| E || [Pi &lt;- Ei|Cs] |&gt;(R)\n=&gt;  Ti = Ei\n    Label: case Ti\n             of [Pi|X] -&gt; Ti = X % reassign Ti\n                          &lt;| E || Cs |&gt;(R)\n                          goto Label\n              ; [_ |X] -&gt; Ti = X % reassign Ti\n                          goto Label\n              ; []     -&gt; ok                              \n           end\n\n&lt;| E || [Pi = Ei|Cs] |&gt;(R)\n=&gt;  case Ei\n      of Pi -&gt; &lt;| E || Cs |&gt;(R)\n       ; _  -&gt; ok\n    end\n\n&lt;| E || [Ei|Cs] |&gt;(R)\n=&gt;  case Ei\n      of true  -&gt; &lt;| E || Cs |&gt;(R)\n       ; false -&gt; ok\n    end\n</code></pre>\n\n<p>In these translations, pattern matching syntax is used, with the\nintent that the variables which are unbound according to the\nnormal rules of Erlang, and thus get bound by the Pi &lt;- or Pi =\nmatching, are treated <em>as if</em> unbound in the code to be generated,\nignoring whatever values they might previous have had.  That also\napplies when R or Ti appears on the left of a pattern match; the\nfact that the variable really was bound is ignored and a simple\nassignment is done.</p>\n\n<p>This does involve (re-)assignment to local variables in the code\nto be generated, but it does NOT involve user-visible assignment\nand it does NOT involve mutable data structures.  It is no more\nproblematic for the language or the runtime system than reusing a\ndead register is.</p>\n\n<p>Handling multi-list enumeration is a simple, albeit schematic,\nchange to the rule for enumeration.</p>\n\n<pre><code>&lt;| E || [Pi1 &lt;- Ei1 &amp;&amp; Pi2 &lt;- Ei2 &amp;&amp; ... &amp;&amp; Pik &lt;- Eik|Cs] |&gt;(R)\n=&gt;  Ti1 = Ei1\n    ...\n    Tik = Eik\n    Label: case {Ti1,...,Tik}\n             of {[Pi1|X1], ..., [Pik,Xk]} -&gt;\n                Ti1 = X1    % reassign\n                ...\n                Tik = Xk    % reassign\n                &lt;| E || Cs |&gt;(R)\n                goto label\n              ; {[_|X1], ..., [_|Xk]} -&gt;\n                Ti1 = X1    % reassign\n                ...\n                Tik = Xk    % reassign\n              ; {[], ..., []} -&gt;\n                ok\n           end\n</code></pre>\n\n<p>Note that the use of tuple syntax in the case expression and the\ncase clauses does not imply the literal creation of a tuple in\nthe generated code, only that k values are to be matched against\nk patterns in each case clause.</p>\n\n<h1>Motivation</h1>\n\n<p>\"How do I iterate over several lists at once?\" is a moderately\ncommon question from Erlang and Haskell beginners.  The stock\nanswer, \"use zip\", is almost tolerable for Haskell, where the\nthe zipping family goes up to 7 lists and the compiler works\nhard to eliminate the intermediate data structures by using\ndeforestation.  For Erlang, where even zip4 is missing, and\nwhere the apparent cost of creating the unwanted list and\ntuples is all too real, the fact that the use of zips makes\nthe code harder to read means that there is no good to\noutweigh the bad.</p>\n\n<p>With the new notation,</p>\n\n<pre><code>zip4(As, Bs, Cs, Ds) -&gt;\n    [{A,B,C,D} || A &lt;- As &amp;&amp; B &lt;- Bs &amp;&amp; C &lt;- Cs &amp;&amp; D &lt;- Ds].\n\nzipwith4(F, As, Bs, Cs, Ds) -&gt;\n    [F(A,B,C,D) || A &lt;- As &amp;&amp; B &lt;- Bs &amp;&amp; C &lt;- Cs &amp;&amp; D &lt;- Ds].\n\ndot(Xs, Ys) -&gt;\n    sum([X*Y || X &lt;- Xs &amp;&amp; Y &lt;- Ys]).\n\nifelse(Tests, Xs, Ys) -&gt; % Simulate R's ifelse(,,)\n    [  case T of true -&gt; X ; false -&gt; Y end\n    || T &lt;- Tests &amp;&amp; X &lt;- Xs &amp;&amp; Y &lt;- Ys\n    ].\n</code></pre>\n\n<p>This code from module <code>dialyzer_dep</code></p>\n\n<pre><code>merge_outs([#output{type=list, content=L1}|Left],\n           #output{type=list, content=L2}) -&gt;\n  NewList = [merge_outs([X, Y]) || {X, Y} &lt;- lists:zip(L1, L2)],\n  merge_outs(Left, output(NewList));\n</code></pre>\n\n<p>would become</p>\n\n<pre><code>merge_outs([#output{type=list, content=L1}|Left],\n            #output{type=list, content=L2]) -&gt;\n    merge_outs(Left, output(\n        [merge_outs([X,Y]) || X &lt;- L1 &amp;&amp; Y &lt;- L2]));\n</code></pre>\n\n<p>This code from <code>forward_args/3</code> in module <code>dialyzer_dataflow</code></p>\n\n<pre><code>NewArgTypes = [t_sup(X, Y) ||\n               {X, Y} &lt;- lists:zip(ArgTypes, OldArgTypes)],\n</code></pre>\n\n<p>would become</p>\n\n<pre><code>NewArgTypes = [t_sup(X, Y) || X &lt;- ArgTypes &amp;&amp; Y &lt;- OldArgTypes],\n</code></pre>\n\n<h1>Rationale</h1>\n\n<p>This is a case where no invention is required, really.\nClean has</p>\n\n<pre><code>Qualifier = Generators {|Guard}\nGenerators = {Generator}-list\n           | Generator {&amp; Generator}\nGenerator = Selector &lt;- ListExpr // lazy list\n          | Selector &lt;|- ListExpr // overloaded list\n          | Selector &lt;-: ArrayExpr //  array\n</code></pre>\n\n<p>All I have to do is bend this a little to fit it into Erlang\nsyntax.  Since we use \"||\" for list comprehensions, \"&amp;&amp;\" was\nthe obvious spelling for generators that step together.</p>\n\n<p>I do not yet understand in detail what the Erlang compiler\ndoes, but it seems to involve generating an auxiliary function.\nLet's take</p>\n\n<pre><code>[f(X) || X &lt;- Xs, X &gt; 0]\n</code></pre>\n\n<p>as an example.  This seems to be compiled as</p>\n\n<pre><code>foo(Xs)\n</code></pre>\n\n<p>where</p>\n\n<pre><code>foo([X|Xs]) when X &gt; 0 -&gt; [f(X) | foo(Xs)];\nfoo([_|Xs]) -&gt; foo(Xs);\nfoo([]) -&gt; [].\n</code></pre>\n\n<p>With a multi-sequence generator, the translation is similar.</p>\n\n<pre><code>[g(X, Y) || X &lt;- Xs &amp;&amp; Y &lt;- Ys, X &gt; Y]\n</code></pre>\n\n<p>can be compiled as</p>\n\n<pre><code>bar(Xs, Ys)\n</code></pre>\n\n<p>where</p>\n\n<pre><code>bar([X|Xs], [Y|Ys]) when X &gt; Y -&gt;\n    [g(X, Y) | bar(Xs, Ys)];\nbar([_|Xs], [_|Ys]) -&gt; bar(Xs, Ys);\nbar([], []) -&gt; [].\n</code></pre>\n\n<p>The specification above gives the kind of translation I would like\nto see; I do have an implementation in mind (based on Pop-2) that\ndoesn't need the reversal but don't know how it would fit in BEAM.</p>\n\n<p>One obvious question is whether we need this at all.  Why not just\nget people to write calls to <code>lists:zip</code> and get the compiler to\noptimise them?  One answer is that this notation is much clearer;\nthe programmer's <em>intent</em> is to advance along two or more lists\nat the same time, not to create a list of pairs.  When you want to\ncreate a list of pairs, <code>lists:zip/2</code> is the perfect way to do it.\nA more important answer is that the proposed notation is NOT a\nsimple optimisation of equivalent code using <code>lists:zip/2</code>.</p>\n\n<pre><code>[E || {P,Q} &lt;- lists:zip(A, B)]    % \"zip version\"\n</code></pre>\n\n<p>fails at once if A and B are not proper lists of the same length.</p>\n\n<pre><code>[E || P &lt;- A &amp;&amp; Q &lt;- B]            % \"Clean version\"\n</code></pre>\n\n<p>eventually fails if A and B are not proper lists of the same\nlength, but may have evaluated E (which may have had side effects)\nmany times before that.  So an Erlang compiler would not be\nallowed to replace the \"zip version\" by the \"Clean version\" unless\nit could prove both that A and B were lists (which may be within\nthe abilities of the Dialyzer) and that they were exactly the same\nlength (which as far as I know isn't).</p>\n\n<p>However, a multi-sequence generator and a single-sequence one\nusing calls to <code>lists:zip/2</code> are clearly <em>similar</em>, so they should\neventually react to lists of different length the same way.\nIn Haskell, zipping two lists of different length acts as if the\nlonger were truncated to the length of the shorter.  Since\nHaskell has lazy evaluation, lists may be infinite, so you can't\nafford to wait until the end to start a comprehension.  Since\nErlang is strict, and since mistakes are common, <code>lists:zip/2</code> in\nErlang makes sense as it is.</p>\n\n<h1>Backwards Compatibility</h1>\n\n<p>The \"operator\" '&amp;&amp;' is not legal syntax anywhere in Erlang\nat the moment, so no existing code can be affected.</p>\n\n<h1>Reference Implementation</h1>\n\n<p>None yet, but I'd like to do it when I can figure out how.</p>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n"}},"__N_SSG":true}