{"pageProps":{"index":{"id":"0017","content":"<pre><code>Author: Richard A. O'Keefe &lt;ok(at)cs(dot)otago(dot)ac(dot)nz&gt;\nStatus: Draft\nType: Standards Track\nErlang-Version: R12B-4\nCreated: 23-Jul-2008\nPost-History:\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 17: <a href=\"eep-0017.md\" title=\"EEP Source\"> Fix andalso and orelse</a></h2>\n\n<h1>Abstract</h1>\n\n<p>Erlang 5.1 added the ability to use 'andalso', 'orelse',\n'and', and 'or' in guards.  However, the semantics for\n'andalso' and 'orelse' differs from that in other related\nlanguages, causing confusion and inefficiency.</p>\n\n<p>I propose making 'andalso' and 'orelse' work like Lisp\nAND and OR respectively.</p>\n\n<h1>Specification</h1>\n\n<p>Currently, (E1 andalso E2) as an expression acts like</p>\n\n<pre><code>case E1\n of false -&gt; false\n  ; true  -&gt; case E2 \n               of false -&gt; false\n                ; true  -&gt; true\n             end\nend\n</code></pre>\n\n<p>except that in my tests the former raises <code>{badarg,NonBool}</code>\nexceptions and the latter raises <code>{case_clause,NonBool}</code> ones.</p>\n\n<p>This should be changed to</p>\n\n<pre><code>case E1\n  of false -&gt; false\n   ; true   -&gt; E2\nend.\n</code></pre>\n\n<p>Currently, (E1 orelse E2) as an expression acts like</p>\n\n<pre><code>case E1\n  of true  -&gt; true\n   ; false -&gt; case E2\n                of true  -&gt; true\n                 ; false -&gt; false\n              end\nend\n</code></pre>\n\n<p>except that in my tests the former raises <code>{badarg,NonBool}</code>\nexceptions and the latter raises <code>{case_clause,NonBool}</code> ones.</p>\n\n<p>This should be changed to</p>\n\n<pre><code>case E1\n  of true  -&gt; true\n   ; false -&gt; E2\nend\n</code></pre>\n\n<p>There is apparently a folklore belief that using 'andalso' (or\n'orelse') in a guard will somehow give you better code than using\n',' (or ';').  On the contrary, you will get rather worse code.\nSee \"Motivation\" for an example.  This should change.</p>\n\n<pre><code>guard ::= gconj {';' gconj}*\ngconj ::= gtest {',' gtest}*\ngtest ::= '(' guard ')' | ...\n</code></pre>\n\n<p>First, we allow ',' and ';' to nest, using parentheses.\nSecond, we rule that as outer operators in a guard, the\nonly difference between ',' and 'andalso' is precedence,\nand the only difference between ';' and 'orelse' is also\nprecedence.  In a guard test like</p>\n\n<pre><code>is_atom(X andalso Y)\n</code></pre>\n\n<p>the 'andalso' cannot be replaced by ',', but whenever one\nCOULD be replaced by the other, they should have the same effect.</p>\n\n<h1>Motivation</h1>\n\n<h3>Cultural consistency</h3>\n\n<ul>\n<li><p>Common Lisp</p>\n\n<pre><code>(defun member-p (X Xs)\n  (and (consp Xs)\n       (or (equal X (first Xs))\n           (member-p X (rest Xs)))))\n</code></pre></li>\n<li><p>Scheme</p>\n\n<pre><code>(define (member? X Xs)\n  (and (pair? Xs)\n       (or (equal? X (car Xs))\n           (member? X (cdr Xs)))))\n</code></pre></li>\n<li><p>Standard ML</p>\n\n<pre><code>fun is_member(x, xs) =\n    not (null xs) andalso (\n    x = hd xs orelse is_member(x, tl xs))\n</code></pre></li>\n<li><p>Haskell</p>\n\n<pre><code>x `is_member_of` xs =\n   not (null xs) &amp;&amp; (x == head xs || x `is_member_of` tail xs)\n</code></pre></li>\n<li><p>Dylan</p>\n\n<p>I don't know Dylan syntax well enough to finish this\nexample, but I do know that '&amp;' and '|' in Dylan are exactly\nlike AND and OR in Common Lisp except for syntax.  (They are\ndocumented as allowing the right operand to return anything,\nincluding multiple values.)</p></li>\n<li><p>Python</p>\n\n<pre><code>def is_member(x, xs):\n    n = len(xs)\n    return n &gt; 0 and (x == xs[0] or is_member(x, xs[1:n]))\n</code></pre>\n\n<p>I'm not perfectly sure about this, but the reference manual\nis very explicit that the second operand of 'and' or 'or' can\nbe anything.</p></li>\n<li><p>Smalltalk</p>\n\n<p>Doing this example this way in Smalltalk requires considerable\npain in going against the grain of Smalltalk, however the\n'and:' and 'or:' selectors in Smalltalk DO check that their\nfirst argument is Boolean and DON'T check anything about (the\nresult of) their second argument.</p></li>\n</ul>\n\n<p>In all of these, the \"and\" and \"or\" operations work exactly the\nsame way, and in the languages whose implementations support tail\nrecursion (Common Lisp, Scheme, Standard ML, Haskell), the\nfunction shown above is tail recursive.  (I could have added more\nlanguages to the list.)</p>\n\n<p>Erlang stands out.  The behaviour of 'andalso' is surprising, and\nthe fact that 'andalso' and 'orelse' block tail recursion is quite\nastonishing.  I am all in favour of giving programmers shocks that\nteach them something useful about programming, but this one is not\na useful lesson.  Testing both arguments of 'and' and 'or' makes\nsense, because the code executed for those operators always GETS\nthe values of both operands.  But 'andalso' and 'orelse' only test\ntheir second operand SOME of the time.</p>\n\n<pre><code>X = 1, X &gt;= 0 andalso X    % checked error\nX = 1, X &lt; 0 andalso X     % unchecked error\n</code></pre>\n\n<p>There doesn't seem to be much point in checking SOME of the time,\nespecially when it does something as dramatic as blocking tail\nrecursion.</p>\n\n<h3>Guards code</h3>\n\n<p>As for guards, here is a small example</p>\n\n<pre><code>f(X) when X &gt;= 0, X &lt; 1 -&gt; math:sqrt(X).\n</code></pre>\n\n<p>This compiles to the following rather obvious code:</p>\n\n<pre><code>function, f, 1, 2}.\n  {label,1}.\n    {func_info,{atom,bar},{atom,f},1}.\n  {label,2}.\n    {test,is_ge,{f,1},[{x,0},{integer,0}]}.\n    {test,is_lt,{f,1},[{x,0},{integer,1}]}.\n    {call_ext_only,1,{extfunc,math,sqrt,1}}.\n</code></pre>\n\n<p>Some people expect 'andalso' to do as well or better.\nI expected it to do the same, and this EEP requires it to.\nHere's the source code:</p>\n\n<pre><code>g(X) when X &gt;= 0 andalso X &lt; 1 -&gt; math:sqrt(X).\n</code></pre>\n\n<p>and here are the BEAM instructions:</p>\n\n<pre><code>{function, g, 1, 4}.\n  {label,3}.\n    {func_info,{atom,bar},{atom,g},1}.\n  {label,4}.\n    {allocate,1,1}.\n    {move,{x,0},{y,0}}.\n    {test,is_ge,{f,5},[{x,0},{integer,0}]}.\n    {bif,'&lt;',{f,7},[{x,0},{integer,1}],{x,0}}.\n    {jump,{f,6}}.\n  {label,5}.\n    {move,{atom,false},{x,0}}.\n  {label,6}.\n    {test,is_eq_exact,{f,7},[{x,0},{atom,true}]}.\n    {move,{y,0},{x,0}}.\n    {call_ext_last,1,{extfunc,math,sqrt,1},1}.\n  {label,7}.\n    {move,{y,0},{x,0}}.\n    {deallocate,1}.\n    {jump,{f,3}}.\n</code></pre>\n\n<p>It not only does a lot more work, it even allocates a stack\nframe that the traditional code does not.</p>\n\n<h1>Rationale</h1>\n\n<p>There are several ways to deal with the surprising behaviour\nof 'andalso' and 'orelse'.</p>\n\n<ol>\n<li><p>Leave things the way they are.</p>\n\n<p>The manual should have lots of warnings added,\nsaying not to use these operators, because they block\ntail recursion and are inefficient in guards.</p>\n\n<p>It is reasonable to address other issues first, but it just\nwill not do long term.  You don't have to rush around\nbandaging everyone you meet, but you shouldn't build pit\ntraps in front of them either.</p></li>\n<li><p>Remove them from the language.</p>\n\n<p>I would prefer this.  And that goes double for 'and' and 'or',\nwhich seem to be completely pointless, as well as confusing.\nI do not think this would be practical politics.</p></li>\n<li><p>Add new operators with sensible semantics.</p>\n\n<p>But what would we call them?  'and' and 'or' are taken,\nand both '|' and '||' are used for something else.  Above\nall, 'andalso' and 'orelse' would still be there, and still\nbe surprising (in a bad way).  We have too many ways to\nspell \"or\" as it is.</p></li>\n<li><p>Fix them.</p></li>\n</ol>\n\n<p>As for the recommendation that ',' and ';' should nest,\nI want Erlang to be simple to think.  If 'andalso' and 'orelse'\nare to act like ',' and ';' in guards -- which I've argued\nabove -- then clearly ',' and ';' should act like 'andalso'\nand 'orelse' in guards.</p>\n\n<h1>Backwards Compatibility</h1>\n\n<p>Any code that ran without raising exceptions will continue\nto produce the same results, except for running faster.</p>\n\n<p>Code that did raise exceptions may raise different exceptions\nelsewhere later, or may quietly complete in unexpected ways.\nI believe it to be unlikely that anyone deliberately relied\non (E1 andelse 0) raising an exception.</p>\n\n<p>Code that was previously broken because these operators have\nsuch surprising behaviour will now work in more cases.</p>\n\n<h1>Reference Implementation</h1>\n\n<p>None.</p>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n"}},"__N_SSG":true}