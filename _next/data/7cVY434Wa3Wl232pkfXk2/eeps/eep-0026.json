{"pageProps":{"index":{"id":"0026","content":"<pre><code>Author: Bj√∂rn Gustavsson &lt;bjorn(at)erlang(dot)org&gt;\nStatus: Accepted/R13A Proposal is to be implemented in OTP release R13A\nType: Standards Track\nErlang-Version: R12B-5\nCreated: 28-Jan-2009\nPost-History:\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 26: <a href=\"eep-0026.md\" title=\"EEP Source\"> Make andalso and orelse tail-recursive</a></h2>\n\n<h1>Abstract</h1>\n\n<p>Erlang 5.1 added the ability to use 'andalso', 'orelse',\n'and', and 'or' in guards.  However, the semantics for\n'andalso' and 'orelse' differs from that in other related\nlanguages, causing confusion and inefficiency.</p>\n\n<p>I propose making 'andalso' and 'orelse' tail-recursive.</p>\n\n<p>This EEP is partly based on Richard O'Keefe's <a href=\"/eeps/eep-0017\" title=\"Richard O'Keefe: EEP 17 - Fix andalso and orelse\">EEP 17</a>,\nbut has a narrower scope.</p>\n\n<h1>Specification</h1>\n\n<p>Currently, <code>(E1 andalso E2)</code> as an expression acts like</p>\n\n<pre><code>case E1 of\n   false -&gt; false;\n   true  -&gt; case E2 of\n       false -&gt; false;\n       true  -&gt; true\n   end\nend\n</code></pre>\n\n<p>except that the former raises <code>{badarg,NonBool}</code> exceptions and the\nlatter raises <code>{case_clause,NonBool}</code> ones.</p>\n\n<p>This should be changed to</p>\n\n<pre><code>case E1 of\n   false -&gt; false;\n   true  -&gt; E2\nend.\n</code></pre>\n\n<p>Currently, <code>(E1 orelse E2)</code> as an expression acts like</p>\n\n<pre><code>case E1 of\n    true -&gt; true\n    false -&gt; case E2 of\n        true  -&gt; true\n        false -&gt; false\n    end\nend\n</code></pre>\n\n<p>except that the former raises <code>{badarg,NonBool}</code> exceptions and the\nlatter raises <code>{case_clause,NonBool}</code> ones.</p>\n\n<p>This should be changed to</p>\n\n<pre><code>case E1 of\n    true  -&gt; true;\n    false -&gt; E2\nend\n</code></pre>\n\n<h1>Motivation</h1>\n\n<p>To unlock the full potential of 'andalso'/'orelse' in Erlang.</p>\n\n<p>Given the current implementation, you either have to make\nrewrite code that is naturally written using AND and OR\noperators using 'case', or only use 'andalso'/'orelse' when\nyou know that your lists are relatively short.</p>\n\n<p>For instance, the function <code>all/2</code> that returns 'true' if\nall elements of a list satisfies a predicate and 'false'\notherwise, can be written like this:</p>\n\n<p>all(Pred, [Hd|Tail]) ->\n       Pred(Hd) and all(Pred, Tail);\n   all(_, []) ->\n       true.</p>\n\n<p>In each recursion, we test that the current element Hd\nsatisfies the predicate AND that the rest of the list also\nmatches the predicate. The code reads almost like English.</p>\n\n<p>Of course, 'and' evaluates both of its operand, so the entire\nlist will be traversed even if the first element of the list\nfails to satisfy the predicate. Furthermore, 'and' is not\ntail-recursive, so the function will use stack space\nproportional to the length of the list.</p>\n\n<p>To avoid the traversing the rest of the list if one element\nfails to satisfy the predicate, we can use 'andalso':</p>\n\n<p>all(Pred, [Hd|Tail]) ->\n       Pred(Hd) andalso all(Pred, Tail);\n   all(_, []) ->\n      true.</p>\n\n<p>As soon as <code>Pred(Hd)</code> returns false, the recursion will\nstop and the rest of the list need not be traversed.\nSince 'andalso' is not tail-recursive, however, the\nfunction will need stack space proportional to the number\nof list elements that are traversed.</p>\n\n<p>To see more clearly that 'andalso' is not tail-recursive,\nhere is <code>all/1</code> with 'andalso' expanded out to a nested\n'case' expression (as it would be in R12B-5):</p>\n\n<pre><code>all(Pred, [Hd|Tail]) -&gt;\n    case Pred(Hd) of\n        false -&gt; false;\n        true  -&gt; case all(Pred, Tail) of\n        false -&gt; false;\n        true  -&gt; true\n        end\n    end;\nall(_, []) -&gt;\n    true.\n</code></pre>\n\n<p>To make <code>all/1</code> tail-recursive in R12B-5, you would have\nto write a 'case' expression yourself:</p>\n\n<pre><code>all(Pred, [Hd|Tail]) -&gt;\n    case Pred(Hd) of\n        false -&gt; false;\n        true  -&gt; all(Pred, Tail)\n    end;\nall(_, []) -&gt;\n    true.\n</code></pre>\n\n<p>If this EEP is accepted, in R13B we could write like\nthis</p>\n\n<pre><code>all(Pred, [Hd|Tail]) -&gt;\n    Pred(Hd) andalso all(Pred, Tail);\nall(_, []) -&gt;\n    true.\n</code></pre>\n\n<p>and the <code>all/1</code> function would be tail-recursive.</p>\n\n<p>In my opinion, the latter is easier to read and write.\nThe 'case' expression is mostly boiler-plate code\nwhere 'true' and 'false' must be correctly spelled\nseveral times. (Misspellings like 'ture' and 'flase'\nare quite common, but are in most cases found the\nfirst time the program is tested.)</p>\n\n<p>It could be argued that because Erlang has clearly defined truth\nvalues (unlike some other languages where 0 is false and\neverything else true), all operators that operate on booleans\nshould make sure that their arguments are booleans.</p>\n\n<p>Testing both arguments of 'and' and 'or' makes\nsense, because the code executed for those operators always GETS\nthe values of both operands.  But 'andalso' and 'orelse' only test\ntheir second operand SOME of the time.</p>\n\n<pre><code>X = 1, X &gt;= 0 andalso X    % checked error\nX = 1, X &lt; 0 andalso X     % unchecked error\n</code></pre>\n\n<p>There doesn't seem to be much point in checking SOME of the time,\nespecially when it does something as dramatic as blocking tail\nrecursion.</p>\n\n<p>Richard O'Keefe's motivation in <a href=\"/eeps/eep-0017\" title=\"Richard O'Keefe: EEP 17 - Fix andalso and orelse\">EEP 17</a> is \"Cultural consistency\"\nwith other languages. See <a href=\"/eeps/eep-0017\" title=\"Richard O'Keefe: EEP 17 - Fix andalso and orelse\">EEP 17</a>.</p>\n\n<h1>Rationale</h1>\n\n<p>Surprisingly (for me), the subject of this EEP turned out to\nbe controversial.</p>\n\n<p>I will start this rationale by listing some of the more serious\narguments against this proposal and my counter-arguments, and\nfinish with the arguments for this proposal.</p>\n\n<p>One argument against is to be that the new construct\nwill be confusing for users. 'andalso'/'orelse' can no longer\nbe described as a \"boolean operator\", but is now a \"control\nstructure\".</p>\n\n<p>Yes, 'andalso'/'orelse' is no longer a boolean operator in the\nsense that it no longer GUARANTEES that it returns a boolean.\nHowever, using 'andalso'/'orelse' as a 'case' expression</p>\n\n<pre><code>case E1 orelse E2 of\n    true -&gt; ....;\n    false -&gt; ...\nend\n</code></pre>\n\n<p>works in the same way as before. Most users certainly will not\nnotice any difference.  And if an operator is not allowed to not\nevaluate both of its arguments, it certainly wasn't an operator\nbefore either.</p>\n\n<p>Another argument against is that 'andalso'/'orelse' can be\nused in one-liners to write \"ugly code\", such as</p>\n\n<pre><code>Debug andalso io:format(\"...\", [...])\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>if\n    Debug -&gt; io:format(\"...\", [...]);\n    true -&gt; ok\nend\n</code></pre>\n\n<p>The code might be \"ugly\" (according to someone's taste or\nsome definition of \"ugly\"), but the one-liner is not hard\nto understand and I don't see how it could turn into a\ncode-maintenance problem.</p>\n\n<p>The main argument for making 'andalso'/'orelse' tail-recursive:\nThe current implementation is dangerous. You could very easily\nwrite non-tail-recursive code, for instance</p>\n\n<pre><code>all(Pred, [Hd|Tail]) -&gt;\n    Pred(Hd) andalso all(Pred, Tail);\nall(_, []) -&gt;\n    true.\n</code></pre>\n\n<p>without realizing it and introduce serious performance\nproblems. (Which has happened in <a href=\"http://www.erlang.org/pipermail/erlang-questions/2008-November/039935.html\" title=\"Mikael Pettersson: e-mail to erlang-questions\">practice</a>).</p>\n\n<p>If you cannot use 'andalso'/'orelse' in this way, these\noperators become pretty useless. (Some would say\n<a href=\"http://www.erlang.org/pipermail/erlang-questions/2008-November/039935.html\" title=\"Mikael Pettersson: e-mail to erlang-questions\">\"utterly useless\"</a>.) You have to rewrite\nbeautiful code (in my opinion) to uglier code (in\ncomparison, in my opinion) and more error-prone\ncode (misspelling of 'true'/'false' in the boiler-plate\ncode):</p>\n\n<pre><code>all(Pred, [Hd|Tail]) -&gt;\n    case Pred(Hd) of\n        false -&gt; false;\n        true  -&gt; all(Pred, Tail)\n    end;\nall(_, []) -&gt;\n   true.\n</code></pre>\n\n<h1>Backwards Compatibility</h1>\n\n<p>Any code that ran without raising exceptions will continue\nto produce the same results, except for running faster.</p>\n\n<p>Code that did raise exceptions may raise different exceptions\nelsewhere later, or may quietly complete in unexpected ways.\nI believe it to be unlikely that anyone deliberately relied\non <code>(E1 andalso 0)</code> raising an exception.</p>\n\n<p>Code that was previously broken because these operators have\nsuch surprising behavior will now work in more cases.</p>\n\n<h1>Reference Implementation</h1>\n\n<p>The proposed change has been implemented and run in our\ndaily builds without finding any code in Erlang/OTP that\nneeded to be updated. One test case in the compiler test\nsuite that that test 'andalso'/'orelse' needed to be updated.</p>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n"}},"__N_SSG":true}