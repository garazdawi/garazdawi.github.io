.TH snmpa_network_interface 3 "snmp 5.6" "Ericsson AB" "Erlang Module Definition"
.SH NAME
snmpa_network_interface \- Behaviour module for the SNMP agent network interface.
.SH DESCRIPTION
.LP
This module defines the behaviour of the agent network interface\&. A \fIsnmpa_network_interface\fR\& compliant module must export the following functions:
.RS 2
.TP 2
*
start_link/4
.LP
.TP 2
*
info/1
.LP
.TP 2
*
get_log_type/1
.LP
.TP 2
*
set_log_type/2
.LP
.TP 2
*
verbosity/2
.LP
.RE

.LP
The semantics of them and their exact signatures are explained below\&.
.LP
But this is not enough\&. There is also a set of \fImandatory\fR\& messages which the network interface entity must be able to receive and be able to send\&. This is described in chapter snmp_agent_netif\&.
.SH EXPORTS
.LP
.B
start_link(Prio, NoteStore, MasterAgent, Opts) -> {ok, Pid} | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
Prio = priority()
.br
NoteStore = pid()
.br
MasterAgent = pid()
.br
Opts = [opt()]
.br
opt() = {verbosity, verbosity()} | {versions, versions()} | term()
.br
versions() = [version()]
.br
version() = v1 | v2 | v3
.br
.RE
.RE
.RS
.LP
Start-link the network interface process\&.
.LP
\fINoteStore\fR\& is the pid of the note-store process and \fIMasterAgent\fR\& is the pid of the master-agent process\&.
.LP
\fIOpts\fR\& is an (basically) implementation dependent list of options to the network interface process\&. There are however a number of options which \fImust\fR\& be handled: \fIversions\fR\& and \fIverbosity\fR\&\&.
.RE
.LP
.B
info(Pid) -> [{Key, Value}]
.br
.RS
.LP
Types:

.RS 3
Pid = pid()
.br
.RE
.RE
.RS
.LP
The info returned is basically up to the implementer to decide\&. This implementation provided by the application provides info about memory allocation and various socket information\&.
.LP
The info returned by this function is returned together with other info collected by the agent when the info function is called (tagged with with the key \fInet_if\fR\&)\&.
.RE
.LP
.B
verbosity(Pid, Verbosity) -> void()
.br
.RS
.LP
Types:

.RS 3
Pid = pid()
.br
Verbosity = verbosity()
.br
.RE
.RE
.RS
.LP
Change the verbosity of a running network interface process\&.
.RE
.LP
.B
get_log_type(Pid) -> {ok, LogType} | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
Pid = pid()
.br
LogType = atl_type()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
The Audit Trail Log is managed by the network interface process\&. So, it is this process that has to retrieve the actual log-type\&.
.RE
.LP
.B
set_log_type(Pid, NewType) -> {ok, OldType} | {error, Reason}
.br
.RS
.LP
Types:

.RS 3
Pid = pid()
.br
NewType = OldType = atl_type()
.br
Reason = term()
.br
.RE
.RE
.RS
.LP
The Audit Trail Log is managed by the network interface process\&. So, it is this process that has to do the actual changing of the type\&.
.LP
See set_log_type for more info\&.
.RE