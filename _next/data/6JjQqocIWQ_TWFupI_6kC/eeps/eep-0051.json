{"pageProps":{"index":{"id":"0051","content":"<pre><code>Author: Sergey Prokhorov &lt;seriy(dot)pr(at)gmail(dot)com&gt;\nStatus: Accepted/23.0 Proposal is to be implemented in OTP release 23.0\nType: Standards Track\nErlang-Version: 23.0\nCreated: 07-Oct-2019\nPost-History:\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 51: <a href=\"eep-0051.md\" title=\"EEP Source\"> Underscore digit separator in numeric literals</a></h2>\n\n<h1>Abstract</h1>\n\n<p>This EEP extends numeric literal syntax, allowing underscore <code>_</code> as digits\nseparator. It extends syntax of integer, float and based integer literals.</p>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n\n<h1>Specification</h1>\n\n<p>Current syntax for numeric literals can be described by following scheme:</p>\n\n<pre><code>DIGIT = [0-9]\nBASE_DIGIT = [0-9a-zA-Z]\nSIGN = [+-]\n\nINTEGER = SIGN? DIGIT+\n\nFLOAT = SIGN? DIGIT+ '.' DIGIT+ ('e' SIGN? DIGIT+)?\n\nBASED_INTEGER = SIGN? DIGIT+ '#' BASE_DIGIT+\n</code></pre>\n\n<p>EEP extends this syntax by allowing single underscore <code>_</code> character as a\nseparator between two <code>DIGIT</code> or <code>BASE_DIGIT</code> characters. I.e., characters from\nboth left and right sides of <code>_</code> should be digits. Leading, trailing or repeated\nunderscores should not be allowed as well as underscores next to <code>-</code> <code>.</code> <code>#</code> <code>e</code>.\nSeparator is only used to visually separate groups of characters. It doesn't\nchange semantics of literal and is removed by lexer.</p>\n\n<p>Following are examples of valid numeric literals:</p>\n\n<pre><code>123_456\n1_2_3_4_5\n123_456.789_123\n1.0e1_23\n16#DEAD_BEEF\n2#1100_1010_0011\n</code></pre>\n\n<p>And following are examples of literals that are not allowed:</p>\n\n<pre><code>_123  % will be interpreted as variable name\n123_\n123__456  % only single underscore allowed\n123_.456  % underscore can only separate digits, not other symbols\n123._456\n16#_1234\n16#1234_\n</code></pre>\n\n<p>The underscores are to be lost when representing abstract forms or terms as\nstrings (<code>erl_pp</code>, <code>io_lib</code>).</p>\n\n<h1>Motivation</h1>\n\n<p>Digit separator becomes especially handy for relatively long literals like\nthousands separator for decimals <code>Million = 1_000_000</code>, <code>SecondsInDay = 86_400</code>\nbyte separator for hexadecimal <code>16#DEAD_BEEF_CAFE</code>. Group separator makes\nsuch literals more readable (when used wisely) and makes it easier to visualy\nspot typos like <code>MicroSecond = Second * 100000</code>.\nThe digit separator feature was adopted by multiple programming languages\nstarting from at least Ada83.</p>\n\n<h1>Rationale</h1>\n\n<p>Underscore character was choosen as separator because it is used by multiple\nother languages such as \"Ada 83\", \"C#\", \"Java 7\", \"Perl 2.0\", \"Python 3.6\",\n\"Ruby\", \"Rust\", \"Swift\" and \"Go\". Also it doesn't conflict with current Erlang\nsyntax (unlike, for example, <code>,</code>).\nThe only ambiguous decision was about where exactly digit separators should be\nallowed. It was decided that underscore should be allowed only between digits\nas meant by being a \"digit separator\".</p>\n\n<h1>Backwards Compatibility</h1>\n\n<p>All existing Erlang code remains acceptable. The implementation is done\nentirely in the Erlang lexer, so, no changes are needed in parser and\neven tools that examine ASTs will be unaffected.\nExternal tools like code editors and syntax highlighters might need to be\nupdated to be able to recognize new syntax for numeric literals.</p>\n\n<h1>Reference Implementation</h1>\n\n<p>The reference implementation is provided in a form of pull-request on GitHub</p>\n\n<pre><code>https://github.com/erlang/otp/pull/2324\n</code></pre>\n"}},"__N_SSG":true}