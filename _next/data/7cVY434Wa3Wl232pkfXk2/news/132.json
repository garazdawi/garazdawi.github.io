{"pageProps":{"item":{"id":"132","title":"Erlang OTP 22.0 is released","article_date":1557792000000,"lead":"Erlang/OTP 22.0 is a new major release with improvments and new features, as well as some incompatibilities.","frontmatter":{"id":"132","title":"Erlang OTP 22.0 is released","lead":"Erlang/OTP 22.0 is a new major release with improvments and new features, as well as some incompatibilities.","twitter_status":"Erlang/OTP 22, a new new!","tags":"release","article_date":"2019-05-14T00:00:00Z","created_at":"2019-05-14T10:57:20Z","updated_at":"2019-05-14T12:59:45Z","admin_user_id":"3","visible":"true","article_type_id":"3"},"content":"# OTP 22.0\n\nErlang/OTP 22 is a new major release with new features and improvements as well as incompatibilities.\n\nFor a deeper dive into the highlights of the OTP 22 release, you can read our blog here:\n\n[http://blog.erlang.org/OTP-22-Highlights/](http://blog.erlang.org/OTP-22-Highlights/)\n## Potential Incompatibilities\n* gen_* behaviours: If logging of the last N messages through sys:log/2,3 is active for the server, this log is included in the terminate report.\n* reltool: A new element, Opts, can now be included in a rel tuple in the reltool release specific configuration format: {rel, Name, Vsn, RelApps, Opts}.\n* All external pids/ports/refs created by erlang:list_to_pid and similar functions now compare equal to any other pid/port/ref with same number from that node.\n* The old legacy erl_interface library is deprecated as of OTP 22, and will be removed in OTP 23. This does not apply to the ei library.\n* VxWorks is deprecated as of OTP 22 and will be removed in OTP 23.\n## New Features\n### Erts:\n* Support for Erlang Distribution protocol to split the payload of large messages into several fragments.\n* ETS option write_concurrency now also effects and improves scalability of ordered_set tables.\n* The length/1 BIF used to calculate the length of the list in one go without yielding, even if the list was very long. Now it yields when called with long lists.\n* A new (still experimental) module socket is introduced. It is implemented as a NIF and the idea is that it shall be as \"close as possible\" to the OS level socket interface.\n* Added the NIF function enif_term_type, which helps avoid long sequences of enif_is_xyz by returning the type of the given term. This is especially helpful for NIFs that serialize terms, such as JSON encoders, where it can improve both performance and readability.\n### Compiler:\n* The compiler has been rewritten to internally use an intermediate representation based on Static Single Assignment (SSA). The new intermediate representation makes more optimizations possible. * The binary matching optimizations are now applicable in many more circumstances than before.\n* Type optimizations are now applied across local function calls, and will remove a lot more redundant type tests than before.\n* All compiler options that can be given in the source file can now be given in the option list on the command line for erlc.\n* In OTP 22, HiPE (the native code compiler) is not fully functional. The reasons for this are new BEAM instructions for binary matching that the HiPE native code compiler does not support. If erlc is invoked with the +native option, and if any of the new binary matching instructions are used, the compiler will issue a warning and produce a BEAM file without native code.\n### Standard libraries:\n* Cover now uses the counters module instead of ets for updating counters. The new function cover:local_only/0 allows running Cover in a restricted but faster local-only mode. The increase in speed will vary depending on the type of code being cover-compiled, as an example the compiler test suite runs more than twice as fast with the new Cover.\n* A simple socket API is provided through the socket module. This is a low level API that does *not* replace gen_[tcp|udp|sctp]. It is intended to *eventually* replace the inet driver. It also provides a basic API that facilitates the implementation of other protocols than TCP, UDP and SCTP. Known issues are; No support for the Windows OS (currently), a small term leakage. This feature will be classed as experimental in OTP 22.\n* SSL: now uses the new logger API, including log levels and verbose debug logging.\n* SSL: Basic support for TLS 1.3 Server for experimental use.\n* crypto: The new hash_info/1 and cipher_info/1 functions returns maps with information about the hash or cipher in the argument.\n\n \n\nFor more details see\n [http://erlang.org/download/otp_src_22.0.readme](http://erlang.org/download/otp_src_22.0.readme)\n\nPre built versions for Windows can be fetched here:\n [http://erlang.org/download/otp_win32_22.0.exe](http://erlang.org/download/otp_win32_22.0.exe)\n [http://erlang.org/download/otp_win64_22.0.exe](http://erlang.org/download/otp_win64_22.0.exe)\n\nOnline documentation can be browsed here:\n [http://erlang.org/doc/search/](http://erlang.org/doc/search/)\n\nThe Erlang/OTP source can also be found at GitHub on the official Erlang repository:\n\n[https://github.com/erlang/otp](https://github.com/erlang/otp)\n\n[OTP-22.0](https://github.com/erlang/otp/releases/tag/OTP-22.0)\n\n \n\nThank you for all your contributions!\n","tags":["release"]}},"__N_SSG":true}