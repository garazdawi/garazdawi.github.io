{"pageProps":{"index":{"id":"0021","content":"<pre><code>Author: Richard A. O'Keefe &lt;ok(at)cs(dot)otago(dot)ac(dot)nz&gt;\nStatus: Draft\nType: Standards Track\nErlang-Version: R12B-4\nCreated: 08-Aug-2008\nPost-History:\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 21: <a href=\"eep-0021.md\" title=\"EEP Source\"> Optional trailing commas for lists and tuples</a></h2>\n\n<h1>Abstract</h1>\n\n<p>Allow an extra comma at the end of a list or tuple.\nDarren New proposed this change; Richard O'Keefe, who doesn't\nlike it very much, wrote it up as an EEP.</p>\n\n<h1>Specification</h1>\n\n<p>A list that would have ended with \",X]\" for some term X\nmay instead end with \",X,]\".\nA tuple that would have ended with \",X}\" for some term X\nmay instead end with \",X,}\".\nThe rule for tuples also applies to records and -record\ndeclarations.</p>\n\n<h1>Motivation</h1>\n\n<p>About 5,000 lines of the Erlang/OTP sources begin with a right\nsquare bracket or right curly brace.  For example, -record\ndeclarations are commonly laid out as</p>\n\n<pre><code>-record(foo, {\n    field_1 = default_1,\n    ...\n    field_n = default_n\n }).\n</code></pre>\n\n<p>e.g.,</p>\n\n<pre><code>-record(hostent, {\n     h_name,\n     h_aliases = [],\n     h_addrtype,\n     h_length,\n     h_addr_list = []\n    }).\n</code></pre>\n\n<p>and record creation expressions are often laid out similarly, e.g.,</p>\n\n<pre><code>make_hostent(Name, Addrs, Aliases, ?S_A) -&gt;\n    #hostent {\n          h_name      = Name,\n          h_addrtype  = inet,\n          h_length    = 4,\n          h_addr_list = Addrs,\n          h_aliases   = Aliases\n         };\n</code></pre>\n\n<p>Adding entries to such lists (in the informal sense of \"list\"),\nremoving entries, and reordering entries would be simpler if they\nwere all punctuated the same way.  Lists (in the Erlang sense of\n\"list\") of options are also often laid out like this.</p>\n\n<p>C, C++, Java, and Javascript allow a trailing comma in\ninitial value lists.  Python allows trailing commas in lists and\ndictionaries.  Python in particular is evidence that a programming\nlanguage can support this feature without charges of \"C envy\" or\nof extreme ugliness.</p>\n\n<h1>Rationale</h1>\n\n<p>I don't actually feel any need for this proposal; I believe that\nthe answer is better tool support.  However, many people are\nwedded to their tools, even more than their programming languages.\nDarren New is not the only one to have asked for it, and with\nabout 1 SLOC in 110 of the Erlang/OTP sources reflecting a list or\ntuple where this feature could have been used, it's very much a\nlow cost high public appreciation feature.</p>\n\n<p>I wrote that last sentence before working on the parser to make it\naccept this \"feature\".  There are 115 lines of plain diffs.  I\ncould have made this change to the Prolog parser in 10 minutes,\nbut then the Prolog parser has the enormous advantage of NOT being\nwritten using an LR parser generator like Yecc.  Still, now that I\n<em>have</em> hacked on the parser, the cost to everyone <em>else</em> is low.</p>\n\n<p>The specification was carefully worded.  Commas are NOT allowed in\nempty lists or tuples, nor in list or tuple comprehensions.  They\nare only allowed after a final element, so <code>[1|L,]</code> is also not\nallowed.  Nor are trailing commas allowed inside argument lists,\nonly in <code>[]</code> and <code>{}</code>.  They are, however, allowed in tuple and\nrecord types.</p>\n\n<p>This is very similar to the \"optional semicolons\" EEP (which was\nFAR simpler to implement).  The heart and soul of that EEP is the\ndesire to make semicolons and commas look DIFFERENT; for this\nreason it is important NOT to allow optional trailing semicolons.\nIf semicolons may trail, commas must not.\nIf commas may trail, semicolons must not.\nIt is also important NOT to approach the \"consistent punctuation\nfor list elements\" problem by allowing optional leading commas.\nIf semicolons may lead, commas must not.\nIf commas may lead, semicolons must not.\nSince trailing commas are established practice in C, C++, Java,\nECMAScript, Python, &amp;c, commas trail, semicolons lead.</p>\n\n<p>I repeat that this is not my idea.  I've just written up the EEP\nand figured out how to implement it.  With nearly 1% of the SLOC\nin the Erlang/OTP system being cases where people might well have\nhad reason to add a trailing comma, had it been legal, it seemed\nworth while finding out whether it would be practical.</p>\n\n<h1>Backwards Compatibility</h1>\n\n<p>All existing Erlang code remains acceptable with unchanged\nsemantics.  The commas are dealt with entirely in the parser;\nother language manipulation tools never know that they were\nthere, so work perfectly with code using them.</p>\n\n<h1>Reference Implementation</h1>\n\n<p>The auxiliary file <a href=\"eep-0021-1.diff\" title=\"Patch for erl_parse.yrl\">eep-0021-1.diff</a>\nis a patch file to be applied to <code>erl_parse.yrl</code>.</p>\n\n<p>You would think that all we'd need to do would be to change</p>\n\n<pre><code>... ']'                    ... '}'\n</code></pre>\n\n<p>to  </p>\n\n<pre><code>... ',' ']'                ... ',' '}'\n</code></pre>\n\n<p>in several places.  You would be wrong.  With a different grammar,\nmaybe.  With the current grammar, this was an uncommonly tricky\nchange requiring surgery in all sorts of places.  The result gets\nthrough Yecc with no complaints other than the two shift/reduce\ncomplaints that are expected (and have nothing to do with this change).</p>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n"}},"__N_SSG":true}