.TH ssh_connection 3 "ssh 4.10" "Ericsson AB" "Erlang Module Definition"
.SH NAME
ssh_connection \- 
    This module provides API functions to send SSH Connection Protocol 
    events to the other side of an SSH channel.
  
.SH DESCRIPTION
.LP
The SSH Connection Protocol is used by clients and servers, that is, SSH channels, to communicate over the SSH connection\&. The API functions in this module send SSH Connection Protocol events, which are received as messages by the remote channel handling the remote channel\&. The Erlang format of thoose messages is (see also below):
.LP
\fI{ssh_cm, \fR\&ssh:connection_ref()\fI, \fR\&\fIchannel_msg()\fR\&\fI}\fR\& 
.LP
If the ssh_client_channel behavior is used to implement the channel process, these messages are handled by handle_ssh_msg/2\&.
.SH DATA TYPES
.nf

\fBssh_data_type_code()\fR\& = integer() >= 0
.br
.fi
.RS
.LP
The valid values are \fI0\fR\& ("normal") and \fI1\fR\& ("stderr"), see RFC 4254, Section 5\&.2\&.
.RE
.nf

\fBresult()\fR\& = req_status() | {error, reason()}
.br
.fi
.nf

\fBreason()\fR\& = closed | timeout
.br
.fi
.RS
.LP
The result of a call\&.
.LP
If the request reached the peer, was handled and the response reached the requesting node the req_status() is the status reported from the peer\&.
.LP
If not, the reason() indicates what went wrong:
.RS 2
.TP 2
.B
\fIclosed\fR\&:
indicates that the channel or connection was closed when trying to send the request 
.TP 2
.B
\fItimeout\fR\&:
indicates that the operation exceeded a time limit 
.RE
.RE
.nf

\fBreq_status()\fR\& = success | failure
.br
.fi
.RS
.LP
The status of a request\&. Coresponds to the \fISSH_MSG_CHANNEL_SUCCESS\fR\& and \fISSH_MSG_CHANNEL_FAILURE\fR\& values in RFC 4254, Section 5\&.4\&.
.RE
.SS SSH Connection Protocol: General
.nf

\fBevent()\fR\& = {ssh_cm, ssh:connection_ref(), channel_msg()}
.br
.fi
.nf

\fBchannel_msg()\fR\& = 
.br
    data_ch_msg() |
.br
    eof_ch_msg() |
.br
    closed_ch_msg() |
.br
    pty_ch_msg() |
.br
    env_ch_msg() |
.br
    shell_ch_msg() |
.br
    exec_ch_msg() |
.br
    signal_ch_msg() |
.br
    window_change_ch_msg() |
.br
    exit_status_ch_msg() |
.br
    exit_signal_ch_msg()
.br
.fi
.RS
.LP
As mentioned in the introduction, the SSH Connection Protocol events are handled as messages\&. When writing a channel handling process without using the support by the ssh_client_channel behavior the process must handle thoose messages\&.
.RE
.nf

\fBwant_reply()\fR\& = boolean()
.br
.fi
.RS
.LP
Messages that include a \fIWantReply\fR\& expect the channel handling process to call  ssh_connection:reply_request/4 with the boolean value of \fIWantReply\fR\& as the second argument\&.
.RE
.SS Data Transfer (RFC 4254, section 5\&.2)
.nf

\fBdata_ch_msg()\fR\& = 
.br
    {data,
.br
     ssh:channel_id(),
.br
     ssh_data_type_code(),
.br
     Data :: binary()}
.br
.fi
.RS
.LP
Data has arrived on the channel\&. This event is sent as a result of calling  ssh_connection:send/[3,4,5]\&.
.RE
.SS Closing a Channel (RFC 4254, section 5\&.3)
.nf

\fBeof_ch_msg()\fR\& = {eof, ssh:channel_id()}
.br
.fi
.RS
.LP
Indicates that the other side sends no more data\&. This event is sent as a result of calling  ssh_connection:send_eof/2\&.
.RE
.nf

\fBclosed_ch_msg()\fR\& = {closed, ssh:channel_id()}
.br
.fi
.RS
.LP
This event is sent as a result of calling ssh_connection:close/2\&. Both the handling of this event and sending it are taken care of by the ssh_client_channel behavior\&.
.RE
.SS Requesting a Pseudo-Terminal (RFC 4254, section 6\&.2)
.nf

\fBpty_ch_msg()\fR\& = 
.br
    {pty,
.br
     ssh:channel_id(),
.br
     want_reply(),
.br
     {Terminal :: string(),
.br
      CharWidth :: integer() >= 0,
.br
      RowHeight :: integer() >= 0,
.br
      PixelWidth :: integer() >= 0,
.br
      PixelHeight :: integer() >= 0,
.br
      TerminalModes :: [term_mode()]}}
.br
.fi
.nf

\fBterm_mode()\fR\& = 
.br
    {Opcode :: atom() | byte(), Value :: integer() >= 0}
.br
.fi
.RS
.LP
A pseudo-terminal has been requested for the session\&. \fITerminal\fR\& is the value of the TERM environment variable value, that is, \fIvt100\fR\&\&. Zero dimension parameters must be ignored\&. The character/row dimensions override the pixel dimensions (when non-zero)\&. Pixel dimensions refer to the drawable area of the window\&. \fIOpcode\fR\& in the \fITerminalModes\fR\& list is the mnemonic name, represented as a lowercase Erlang atom, defined in RFC 4254, Section 8\&. It can also be an \fIOpcode\fR\& if the mnemonic name is not listed in the RFC\&. Example: \fIOP code: 53, mnemonic name ECHO erlang atom: echo\fR\&\&. This event is sent as a result of calling ssh_connection:ptty_alloc/4\&.
.RE
.SS Environment Variable Passing (RFC 4254, section 6\&.4)
.nf

\fBenv_ch_msg()\fR\& = 
.br
    {env,
.br
     ssh:channel_id(),
.br
     want_reply(),
.br
     Var :: string(),
.br
     Value :: string()}
.br
.fi
.RS
.LP
Environment variables can be passed to the shell/command to be started later\&. This event is sent as a result of calling  ssh_connection:setenv/5\&.
.RE
.SS Starting a Shell or Command (RFC 4254, section 6\&.5)
.nf

\fBshell_ch_msg()\fR\& = {shell, ssh:channel_id(), want_reply()}
.br
.fi
.RS
.LP
This message requests that the user default shell is started at the other end\&. This event is sent as a result of calling  ssh_connection:shell/2\&.
.RE
.nf

\fBexec_ch_msg()\fR\& = 
.br
    {exec, ssh:channel_id(), want_reply(), Command :: string()}
.br
.fi
.RS
.LP
This message requests that the server starts execution of the given command\&. This event is sent as a result of calling ssh_connection:exec/4 \&.
.RE
.SS Window Dimension Change Message (RFC 4254, section 6\&.7)
.nf

\fBwindow_change_ch_msg()\fR\& = 
.br
    {window_change,
.br
     ssh:channel_id(),
.br
     CharWidth :: integer() >= 0,
.br
     RowHeight :: integer() >= 0,
.br
     PixelWidth :: integer() >= 0,
.br
     PixelHeight :: integer() >= 0}
.br
.fi
.RS
.LP
When the window (terminal) size changes on the client side, it \fIcan\fR\& send a message to the server side to inform it of the new dimensions\&. No API function generates this event\&.
.RE
.SS Signals (RFC 4254, section 6\&.9)
.nf

\fBsignal_ch_msg()\fR\& = 
.br
    {signal, ssh:channel_id(), SignalName :: string()}
.br
.fi
.RS
.LP
A signal can be delivered to the remote process/service using the following message\&. Some systems do not support signals, in which case they are to ignore this message\&. There is currently no function to generate this event as the signals referred to are on OS-level and not something generated by an Erlang program\&.
.RE
.SS Returning Exit Status (RFC 4254, section 6\&.10)
.nf

\fBexit_status_ch_msg()\fR\& = 
.br
    {exit_status,
.br
     ssh:channel_id(),
.br
     ExitStatus :: integer() >= 0}
.br
.fi
.RS
.LP
When the command running at the other end terminates, the following message can be sent to return the exit status of the command\&. A zero \fIexit_status\fR\& usually means that the command terminated successfully\&. This event is sent as a result of calling  ssh_connection:exit_status/3\&.
.RE
.nf

\fBexit_signal_ch_msg()\fR\& = 
.br
    {exit_signal,
.br
     ssh:channel_id(),
.br
     ExitSignal :: string(),
.br
     ErrorMsg :: string(),
.br
     LanguageString :: string()}
.br
.fi
.RS
.LP
A remote execution can terminate violently because of a signal\&. Then this message can be received\&. For details on valid string values, see RFC 4254 Section 6\&.10, which shows a special case of these signals\&.
.RE
.SH EXPORTS
.LP
.nf

.B
adjust_window(ConnectionRef, ChannelId, NumOfBytes) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
NumOfBytes = integer()
.br
.RE
.RE
.RS
.LP
Adjusts the SSH flow control window\&. This is to be done by both the client- and server-side channel processes\&.
.LP

.RS -4
.B
Note:
.RE
Channels implemented with the  ssh_client_channel behavior do not normally need to call this function as flow control is handled by the behavior\&. The behavior adjusts the window every time the callback  handle_ssh_msg/2 returns after processing channel data\&.

.RE
.LP
.nf

.B
close(ConnectionRef, ChannelId) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
.RE
.RE
.RS
.LP
A server- or client-channel process can choose to close their session by sending a close event\&.
.LP

.RS -4
.B
Note:
.RE
This function is called by the \fIssh_client_channel\fR\& behavior when the channel is terminated, see  ssh_client_channel(3)\&. Thus, channels implemented with the behavior are not to call this function explicitly\&.

.RE
.LP
.nf

.B
exec(ConnectionRef, ChannelId, Command, Timeout) -> result()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
Command = string()
.br
Timeout = timeout()
.br
.RE
.RE
.RS
.LP
Is to be called by a client-channel process to request that the server starts executing the given command\&. The result is several messages according to the following pattern\&. The last message is a channel close message, as the \fIexec\fR\& request is a one-time execution that closes the channel when it is done\&.
.RS 2
.TP 2
.B
N x data message(s):
The result of executing the command can be only one line or thousands of lines depending on the command\&.
.TP 2
.B
0 or 1 x eof message:
Indicates that no more data is to be sent\&.
.TP 2
.B
0 or 1 x exit signal message:
Not all systems send signals\&. For details on valid string values, see RFC 4254, Section 6\&.10
.TP 2
.B
0 or 1 x exit status message:
It is recommended by the SSH Connection Protocol to send this message, but that is not always the case\&.
.TP 2
.B
1 x closed status message:
Indicates that the \fIssh_client_channel\fR\& started for the execution of the command has now been shut down\&.
.RE
.LP
See the User\&'s Guide section on One-Time Execution for examples\&.
.RE
.LP
.nf

.B
exit_status(ConnectionRef, ChannelId, Status) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
Status = integer()
.br
.RE
.RE
.RS
.LP
Is to be called by a server-channel process to send the exit status of a command to the client\&.
.RE
.LP
.nf

.B
ptty_alloc(ConnectionRef, ChannelId, Options) -> result()
.br
.fi
.br
.nf

.B
ptty_alloc(ConnectionRef, ChannelId, Options, Timeout) -> result()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
Options = proplists:proplist()
.br
Timeout = timeout()
.br
.RE
.RE
.RS
.LP
Sends an SSH Connection Protocol \fIpty_req\fR\&, to allocate a pseudo-terminal\&. Is to be called by an SSH client process\&.
.LP
Options:
.RS 2
.TP 2
.B
{term, string()}:
Defaults to \fIos:getenv("TERM")\fR\& or \fIvt100\fR\& if it is undefined\&.
.TP 2
.B
{width, integer()}:
Defaults to 80 if \fIpixel_width\fR\& is not defined\&.
.TP 2
.B
{height, integer()}:
Defaults to 24 if \fIpixel_height\fR\& is not defined\&.
.TP 2
.B
{pixel_width, integer()}:
Is disregarded if \fIwidth\fR\& is defined\&.
.TP 2
.B
{pixel_height, integer()}:
Is disregarded if \fIheight\fR\& is defined\&.
.TP 2
.B
{pty_opts, [{posix_atom(), integer()}]}:
Option can be an empty list\&. Otherwise, see possible \fIPOSIX\fR\& names in Section 8 in  RFC 4254\&.
.RE
.RE
.LP
.nf

.B
reply_request(ConnectionRef, WantReply, Status, ChannelId) -> ok
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
WantReply = boolean()
.br
Status = req_status()
.br
ChannelId = ssh:channel_id()
.br
.RE
.RE
.RS
.LP
Sends status replies to requests where the requester has stated that it wants a status report, that is, \fIWantReply = true\fR\&\&. If \fIWantReply\fR\& is \fIfalse\fR\&, calling this function becomes a "noop"\&. Is to be called while handling an SSH Connection Protocol message containing a \fIWantReply\fR\& boolean value\&.
.RE
.LP
.B
send(ConnectionRef, ChannelId, Data) ->
.br
.B
send(ConnectionRef, ChannelId, Data, Timeout) ->
.br
.B
send(ConnectionRef, ChannelId, Type, Data) ->
.br
.B
send(ConnectionRef, ChannelId, Type, Data, TimeOut) -> ok | Error
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
Data = iodata()
.br
Type = ssh_data_type_code()
.br
Timeout = timeout()
.br
Error = {error, reason()}
.br
.RE
.RE
.RS
.LP
Is to be called by client- and server-channel processes to send data to each other\&.
.LP
The function subsystem/4 and subsequent calls of \fIsend/3,4,5\fR\& must be executed in the same process\&.
.RE
.LP
.nf

.B
send_eof(ConnectionRef, ChannelId) -> ok | {error, closed}
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
.RE
.RE
.RS
.LP
Sends EOF on channel \fIChannelId\fR\&\&.
.RE
.LP
.nf

.B
session_channel(ConnectionRef, Timeout) -> Result
.br
.fi
.br
.nf

.B
session_channel(ConnectionRef, InitialWindowSize, MaxPacketSize,
.B
                Timeout) ->
.B
                   Result
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
InitialWindowSize = MaxPacketSize = integer() >= 1
.br
Timeout = timeout()
.br
Result = {ok, ssh:channel_id()} | {error, reason()}
.br
.RE
.RE
.RS
.LP
Opens a channel for an SSH session\&. The channel id returned from this function is the id used as input to the other functions in this module\&.
.RE
.LP
.nf

.B
setenv(ConnectionRef, ChannelId, Var, Value, Timeout) -> result()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
Var = Value = string()
.br
Timeout = timeout()
.br
.RE
.RE
.RS
.LP
Environment variables can be passed before starting the shell/command\&. Is to be called by a client channel processes\&.
.RE
.LP
.nf

.B
shell(ConnectionRef, ChannelId) -> Result
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
Result = ok | success | failure | {error, timeout}
.br
.RE
.RE
.RS
.LP
Is to be called by a client channel process to request that the user default shell (typically defined in /etc/passwd in Unix systems) is executed at the server end\&.
.LP
Note: the return value is \fIok\fR\& instead of \fIsuccess\fR\& unlike in other functions in this module\&. This is a fault that was introduced so long ago that any change would break a large number of existing software\&.
.RE
.LP
.nf

.B
subsystem(ConnectionRef, ChannelId, Subsystem, Timeout) ->
.B
             result()
.br
.fi
.br
.RS
.LP
Types:

.RS 3
ConnectionRef = ssh:connection_ref()
.br
ChannelId = ssh:channel_id()
.br
Subsystem = string()
.br
Timeout = timeout()
.br
.RE
.RE
.RS
.LP
Is to be called by a client-channel process for requesting to execute a predefined subsystem on the server\&.
.LP
The function \fIsubsystem/4\fR\& and subsequent calls of send/3,4,5 must be executed in the same process\&.
.RE