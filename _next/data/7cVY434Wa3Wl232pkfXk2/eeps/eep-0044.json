{"pageProps":{"index":{"id":"0044","content":"<pre><code>Author: Bj√∂rn Gustavsson &lt;bjorn(at)erlang(dot)org&gt;\nStatus: Accepted/19.0-we Proposal's -warning and -error directives are accepted to be implemented in OTP release 19.0\nType: Standards Track\nCreated: 30-Sep-2015\nErlang-Version: R19\nPost-History: 16-Oct-2015, 22-Oct-2015, 29-Oct-2015\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 44: <a href=\"eep-0044.md\" title=\"EEP Source\"> Additional preprocessor directives</a></h2>\n\n<h1>Abstract</h1>\n\n<p>This EEP proposes extensions to the preprocessor to allow more\npowerful conditional compilation.  The existing <code>-ifdef</code> directive\nprovides the bare minimum functionality for doing conditional\ncompilation, but it will often require help from external tools such\nas <code>autoconf</code>.</p>\n\n<h1>Specification</h1>\n\n<p>We will introduce a new predefined macro and four new preprocessor\ndirectives.</p>\n\n<h2>The OTP_RELEASE macro</h2>\n\n<p>There will be a new predefined macro called <code>OTP_RELEASE</code>.  Its value\nwill be an integer giving the release number for run-time system that\nis running the compiler.  In OTP 19, its value will be <code>19</code>.</p>\n\n<p>Code that must work both in both OTP 18 and OTP 19 can use the\nfollowing construction:</p>\n\n<pre><code>-ifdef(OTP_RELEASE).\n  %% Code that will work in OTP 19 or higher.\n-else.\n  %% Code that will work in OTP 18.\n-endif.\n</code></pre>\n\n<p>From <code>OTP_RELEASE</code>, information about the <em>minimum</em> capabilities of\nthe run-time system can be inferred.  It is especially useful for\ntesting for the presence of major new features, especially language\nfeatures.</p>\n\n<p>As a hypothetical example, assuming that OTP_RELEASE had been\navailable in OTP 17, if <code>?OTP_RELEASE == 17</code> evaluated to <code>true</code>,\nwe would know that maps were supported.</p>\n\n<h2>The -if And -elif Directives</h2>\n\n<p>The syntax for the new directives is as follows:</p>\n\n<pre><code>-if(Expression).\n   .\n   .\n   .\n-elif(Expression).\n   .\n   .\n   .\n-else.\n   .\n   .\n   .\n-endif.\n</code></pre>\n\n<p>The <code>-elif</code> directive may be repeated any number of times.</p>\n\n<p><em>Expression</em> is similar to the kind of expressions that are\nallowed in guards, with a few differences:</p>\n\n<ul>\n<li><p>Only a single expression is allowed. <code>,</code> and ';' may not be\nused. Use <code>andalso</code> or <code>orelse</code> instead.</p></li>\n<li><p>In addition to the guard BIFs that are allowed in guards, there are\nseveral additional functions allowed in the expression for an <code>-if</code> or\n<code>-elif</code>. Those functions are described in the next section.</p></li>\n<li><p>Calls to unknown functions will not cause a compilation error,\nbut an evalution failure which will cause the lines that follows\nthe <code>-if</code> or <code>-elif</code> to be skipped.  See the Examples section for\nan example to see why that is useful.  Calls to BIFs that are not\nguard BIFs (such as <code>integer_to_list/1</code>) will cause a compilation\nerror.</p></li>\n</ul>\n\n<h2>Built-In Functions in -if/-elif</h2>\n\n<p>The following functions are available in <code>-if</code> and <code>-elif</code> expressions\n(and <em>only</em> there):</p>\n\n<ul>\n<li><code>defined(</code><em>Symbol</em><code>)</code></li>\n<li><code>is_deprecated(</code><em>Module</em><code>,</code> <em>Function</em><code>,</code> <em>Arity</em><code>)</code></li>\n<li><code>is_exported(</code><em>Module</em><code>,</code> <em>Function</em><code>,</code> <em>Arity</em><code>)</code></li>\n<li><code>is_header(</code><em>Header</em><code>)</code></li>\n<li><code>is_module(</code><em>Module</em><code>)</code></li>\n<li><code>version(</code><em>App</em><code>)</code></li>\n</ul>\n\n<p>Descriptions of each <code>if</code>-builtin follow.</p>\n\n<h3>defined/1</h3>\n\n<p><code>defined(</code><em>Symbol</em><code>)</code> tests whether the preprocessor symbol is\ndefined, just like <code>-ifdef(Symbol)</code>.</p>\n\n<h3>is_deprecated/3</h3>\n\n<p><code>is_deprecated(</code><em>Module</em><code>,</code> <em>Function</em><code>,</code> <em>Arity</em><code>)</code> tests whether\n<em>Function</em><code>/</code><em>Arity</em> is deprecated.  It returns <code>true</code> if and only\nif the compiler would generate a deprecated warning for the function.</p>\n\n<p>To clarify, there are two ways that a function can be deprecated.</p>\n\n<ul>\n<li><p>One is by using the <code>-deprecated()</code> attribute.  This is what you use\nto deprecate your functions, and the Xref tool knows about it.  The\ncompiler does not, and <code>is_deprecated/3</code> does not either.</p></li>\n<li><p>The other way is by listing the function in the compiler's table of\ndeprecated functions in the <code>otp_internal</code> module.  This is what\n<code>is_deprecated/3</code> consults.  <code>is_deprecated(M, F, A)</code> is true if and\nonly if <code>M:F/A</code> is listed in that table; the <code>nowarn_deprecated</code>\noption has no effect on this decision.</p></li>\n</ul>\n\n<h3>is_exported/3</h3>\n\n<p><code>is_exported(</code><em>Module</em><code>,</code> <em>Function</em><code>,</code> <em>Arity</em><code>)</code> tests whether\n<em>Function</em><code>/</code><em>Arity</em> is exported from <em>Module</em>.</p>\n\n<p><em>Module</em> must already have been compiled.  <code>is_exported/3</code> will first\ncall <code>code:ensure_loaded/1</code> to load <em>Module</em> if it is not already\nloaded.  If <em>Module</em> is not loaded and <code>code:ensure_loaded/1</code> fails to\nload it, <code>is_exported/3</code> will return <code>false</code>.  When <em>Module</em> is known\nto be loaded, <code>is_exported/3</code> will test whether the\n<em>Function</em><code>/</code><em>Arity</em> is exported from <em>Module</em>.</p>\n\n<h3>is_header/1</h3>\n\n<p><code>is_header(</code><em>Header</em><code>)</code> tests whether the header file <em>Header</em>\nexists.  It searches for header files in the same way as\n<code>-include_lib</code>.</p>\n\n<h3>is_module/1</h3>\n\n<p><code>is_module(</code><em>Module</em><code>)</code> tests whether the module <em>Module</em> exists.</p>\n\n<p><em>Module</em> must already have been compiled.  <code>is_module/1</code> will call\n<code>code:ensure_loaded/1</code> to load <em>Module</em> if it is not already loaded.\nIf and only if <code>code:ensure_loaded/1</code> returns <code>{module,</code><em>Module</em><code>}</code>,\n<code>is_module/1</code> will return <code>true</code>.</p>\n\n<h3>version/1</h3>\n\n<p><code>version(</code><em>App</em><code>)</code> returns the version number for the given\napplication <em>App</em> as a list of integers and strings.</p>\n\n<p>First the version number string will be split at each \".\" to\nproduce a list of strings.  Then an attempt will be made to convert\neach string in the list to an integer using <code>list_to_integer/1</code>.\nIf the conversion fails, the string will be kept.</p>\n\n<p>Here is an example:</p>\n\n<pre><code>\"1.10.7\"\n</code></pre>\n\n<p>First the string will be split:</p>\n\n<pre><code>[\"1\",\"10\",\"7\"]\n</code></pre>\n\n<p>Then each string in the list will be converted to an integer:</p>\n\n<pre><code>[1,10,7]\n</code></pre>\n\n<p>Here is another example:</p>\n\n<pre><code>\"1.6.0c\"\n</code></pre>\n\n<p>First the string will be split:</p>\n\n<pre><code>[\"1\",\"6\",\"0c\"]\n</code></pre>\n\n<p>Then <code>version/1</code> will attempt to convert each string to an integer:</p>\n\n<pre><code>[1,6,\"0c\"]\n</code></pre>\n\n<p>The last string is not numeric, so it is kept.</p>\n\n<p>The version string is fetched from the app file for the application.\nIf the application cannot be found in the code path, or if the app\nfile cannot be read, or if there is no <code>vsn</code> record in the file, the\nreturn value will be <code>[]</code>.</p>\n\n<h2>The -error Directive</h2>\n\n<p>The syntax for the <code>-error</code> directive is:</p>\n\n<pre><code>-error(Term).\n</code></pre>\n\n<p>The directive will cause a compilation error. The error message\nwill look like:</p>\n\n<pre><code>file.erl:Line: -error(Term).\n</code></pre>\n\n<p>Here is an example:</p>\n\n<pre><code>-module(example).\n-error(\"This is wrong\").\n-error(wrong).\n-error(\"Macros will be expanded: \" ?MODULE_STRING).\n</code></pre>\n\n<p>The error message will be:</p>\n\n<pre><code>example.erl:2: -error(\"This is wrong\").\nexample.erl:3: -error(wrong).\nexample.erl:4: -error(\"Macros will be expanded: example\").\n</code></pre>\n\n<h2>The -warning Directive</h2>\n\n<p>The syntax for the <code>-warning</code> directive is:</p>\n\n<pre><code>-warning(Term).\n</code></pre>\n\n<p>The directive will generate a warning, but the compilation will\ncontinue.  The warning message will look like:</p>\n\n<pre><code>file.erl:Line: Warning -warning(Term).\n</code></pre>\n\n<p>Here is an example:</p>\n\n<pre><code>-module(example).\n-warning(\"This module is obsolete\").\n-warning(\"Macros will be expanded: \" ?MODULE_STRING).\n</code></pre>\n\n<p>The warning message will be:</p>\n\n<pre><code>example.erl:2: Warning: -warning(\"This module is obsolete\").\nexample.erl:3: Warning: -warning(\"Macros will be expanded: example\").\n</code></pre>\n\n<h2>Examples</h2>\n\n<p>Here is an example of code that will work in OTP 18 through OTP 20.\nThere will be a compilation error if an attempt is made to compile\nthe code in OTP 21 or higher.</p>\n\n<pre><code>-ifndef(OTP_RELEASE).\n  %% Code that will work in OTP 18.\n-else.\n  %% OTP 19 or higher.\n  -if(?OTP_RELEASE =:= 19).\n    %% Code that will work in OTP 19.\n  -elif(?OTP_RELEASE =:= 20).\n    %% Code that will work in OTP 20.\n  -else.\n    -error(\"Unsupported OTP release\").\n  -endif.\n-endif.\n</code></pre>\n\n<p>(Note that current versions of the preprocessor has partial support\nfor <code>-if</code> in that it can <em>skip</em> an <code>-if</code> ... <code>-endif</code> construction.\nTherefore this code example will work in OTP 18.)</p>\n\n<p>Here is an hypothetical example showing how a problem could have\nbeen solved in the past\n(see <a href=\"http://erlang.org/pipermail/erlang-questions/2013-July/074542.html\" title=\"predefined Erlang version macros\">predefined Erlang version macros</a>).</p>\n\n<pre><code>-if(is_module(ssh_daemon_channel)).\n  %% R16B: use new ssh behaviour\n  -behavior(ssh_daemon_channel).\n-else.\n  %% R15: use old ssh behaviour\n  -behaviour(ssh_channel).\n-endif.\n</code></pre>\n\n<p>Here is an example of dealing with a newly introduced header file.</p>\n\n<pre><code>-if(is_header(\"stdlib/include/assert.hrl\")).\n  -include_lib(\"stdlib/include/assert.hrl\").\n-else.\n  %% Define dummy macros just so that our code will compile.\n  -define(assert(E),ok).\n  -define(assertNot(E),ok).\n-endif.\n</code></pre>\n\n<p>Here is an hypothetical example showing how we could have tested\nfor the presence of maps:</p>\n\n<pre><code>-if(not is_map(a)).\n  %% The guard BIF is_map/1 exists, i.e. maps are supported.\n-else.\n  %% No support for maps in this release.\n-endif.\n</code></pre>\n\n<p>Note that <code>not is_map(a)</code> will evaluate to <code>true</code> if the <code>is_map/1</code> is\na supported guard BIF.  If <code>is_map/1</code> is not a supported guard BIF,\nthe call to <code>is_map/1</code> will generate an exception which will fail the\nexpression.</p>\n\n<p>Here is an example involving the hypothetical <code>foobar</code> application.\nSince it is not included in OTP, it might not have been compiled, and\n<code>is_exported/3</code> could return <code>false</code> for the wrong reason.  To guard\nagainst that, we will abort the compilation if the <code>foobar</code> module\ndoes not exist:</p>\n\n<pre><code>-if(not is_module(foobar)).\n-error(\"The foobar application has not been compiled\").\n-endif.\n\n-if(is_exported(foobar, new_feature, 1)).\n%% Do something smart with the new feature.\n-else.\n%% Do as best as we can without the new feature.\n-endif.\n</code></pre>\n\n<h1>Motivation</h1>\n\n<p>It is common practice for many open-source applications (or libraries)\nto work with at least two major releases of OTP: the current release\nand the previous one.  An application may also have dependencies to\nother third-party libraries and may need to work with different\nversions of those.</p>\n\n<p>Some applications may support several releases by refraining from\nusing features that are not available in both releases.  That may not\nalways be possible, depending on the purpose of the application. A\ntool for pretty printing Erlang terms, for example, would not be very\nuseful if it didn't support all data types in the release in which it\nwas running.</p>\n\n<p>There is also another issue.  Modern applications are expected:</p>\n\n<ul>\n<li><p>To compile without any warnings.  Many developers use <code>-Werror</code> to\nturn warnings into compilation errors.  That means that warnings\nfor deprecated functions must be suppressed or eliminated.  As an\nexample, the <code>now/0</code> BIF was marked as deprecated in OTP 18.\nThe recommended replacement BIFs were introduced in the same release.</p></li>\n<li><p>Not to cause any warnings in Dialyzer, and to have good type\nspecifications for all exported functions to help finding errors.\nThe type specifications must compile in all supported releases,\nand must not cause warnings.</p></li>\n</ul>\n\n<p>In many cases, the most practical solution for supporting several\nOTP releases is conditional compilation, that is, if some condition\nif fulfilled, one part of a source file will be compiled, and another\npart if not.  For example, to handle the deprecation of <code>now/0</code>:</p>\n\n<pre><code>-ifdef(NOW_DEPRECATED).\n  %% Use the recommended replacement functions.\n  sys_time() -&gt;\n    erlang:timestamp().\n  uniq_name() -&gt;\n    Uniq = erlang:unique_integer([positive]),\n    lists:flatten(io_lib:format(\"name_~w\", [Uniq]));\n-else.\n  %% Use now/0.\n  sys_time() -&gt;\n    now().\n  uniq_name() -&gt;\n    {A,B,C} = now(),\n    lists:flatten(io_lib:format(\"name_~w_~w_~w\", [A,B,C])).\n-endif.\n</code></pre>\n\n<p>That approach works, but some external tool (for example <code>autoconf</code>)\nwill have to arrange for <code>-DNOW_DEPRECATED</code> to be added to the command\nline for <code>erlc</code> if <code>now/0</code> has been deprecated.</p>\n\n<p>Our suggestion for extending the preprocessor facilitates using\nconditional compilation without any external tools. Assuming that\nthe extended preprocessor had been available earlier, the previous\nexample can be rewritten to:</p>\n\n<pre><code>-if(is_exported(erlang, timestamp, 0)).\n  %% Use the recommended replacement functions.\n  sys_time() -&gt;\n    erlang:timestamp().\n  uniq_name() -&gt;\n    Uniq = erlang:unique_integer([positive]),\n    lists:flatten(io:lib_format(\"name_~w\", [Uniq])).\n-else.\n  %% Use now/0.\n  sys_time() -&gt;\n    now().\n  uniq_name() -&gt;\n    {A,B,C} = now(),\n    lists:flatten(io:lib_format(\"name_~w_~w_~w\", [A,B,C])).\n-endif.\n</code></pre>\n\n<p>Alternatively, the first <code>-if</code> could have been written:</p>\n\n<pre><code>-if(is_deprecated(erlang, now, 0)).\n</code></pre>\n\n<h1>Rationale</h1>\n\n<p>Preprocessors have a bad reputation, so why extend the preprocessor?</p>\n\n<p>A quick <a href=\"https://www.google.com/?gfe_rd=cr&amp;q=preprocessor+evil&amp;gws_rd=cr#safe=off&amp;q=preprocessor+evil\" title=\"preprocessor evil\">Google search for \"preprocessor evil\"</a>\nseems to indicate that it is the macro expansion in the preprocessor\nthat is considered evil, not the conditional compilation part.</p>\n\n<p>That said, the major pitfall of conditional compilation is that the\ncode may be misbehave if it is run in a different environment than it\nwas compiled in.  This potential problem already exists with the\n<code>-ifdef</code> directive in the current preprocessor.  It is the\nresponsibility of the user of conditional compilation to ensure that\nthe code is run in an environment compatible with the compilation\nenvironment.</p>\n\n<p>There is one thing a preprocessor, and only a preprocessor, can do:\nskip code that is not syntactically correct (for example, code that\nuses the map syntax).  Therefore, it seems that there is no way\ngetting around using a preprocessor.  We <em>could</em> invent a new\npreprocessor, but that is not the purpose of this EEP.</p>\n\n<p>What about feature detection instead of testing version numbers?</p>\n\n<p>We are all for that.  Whenever possible, tests against version numbers\nshould be avoided if there is a better way.  For example, to test\nwhether the new behavior <code>ssh_daemon_channel</code> exists, use\n<code>is_module(ssh_daemon_channel)</code>.</p>\n\n<p>Would it not be better to have a built-in <code>supported</code> function to test\nfor language-related features instead of testing for the OTP release\nnumber?</p>\n\n<pre><code>-if(supported(maps)).\n%% Map code.\n-endif.\n</code></pre>\n\n<p>Perhaps.  It seems that for this to work the list of supported feature\nnames accepted by <code>supported</code> must be carefully maintained and\ndocumented for each release.  The users must then look up the\nappropriate feature name to use.  It may also not be obvious how to\nname minor changes to the type specification syntax or to the language\nitself.  The resulting code may not be any easier to understand than a\ntest against a release number.</p>\n\n<h3>Rationale for allowing unknown functions in expressions</h3>\n\n<p>The rules for expressions says that the following example is legal\nbecause <code>foobar/0</code> is an unknown function:</p>\n\n<pre><code>-if(foobar()).\n%% Always skipped.\n-endif.\n</code></pre>\n\n<p>The reason is that otherwise some expressions would be legal in\nsome releases but not others.  For example, <code>-if(is_map(a))</code> would\nbe legal in OTP releases that support maps, but cause a compilation\nerror in other releases.  Also, as a side effect, testing guard\nBIFs can be used to test for new features instead of testing\n<code>OTP_RELEASE</code>.</p>\n\n<h1>Backwards Compatibility</h1>\n\n<p>Modules that define the <code>OTP_RELEASE</code> macro will fail to compile\nwith a message similar to this:</p>\n\n<pre><code>example.erl:4: redefining predefined macro 'OTP_RELEASE'\n</code></pre>\n\n<p>Similarly, attempting to define <code>OTP_RELEASE</code> from the command\nline using <code>-D</code> will also fail.</p>\n\n<p>Modules that has attributes that looks like <code>-error(Term)</code> or\n<code>-warning(Term)</code> will need to be updated, as <code>-error(Term)</code> will\nnow cause a compilation error and <code>-warning(Term)</code> will cause\na compilation warning.</p>\n\n<p>The function <code>epp:parse_erl_form/1</code> can now return <code>{warning,Info}</code> in\naddition to its previous return values.  Applications that call\n<code>epp:parse_erl_form/1</code> will need to be updated to handle the new\nreturn value.  Similarly, the <code>epp:parse_file()</code> family of functions\ncan now include <code>{warning,Info}</code> tuples in the returned list of forms.</p>\n\n<h1>Implementation</h1>\n\n<p>The reference implementation can be fetched from Github like this:</p>\n\n<pre><code>git fetch git://github.com/bjorng/otp.git bjorn/preprocessor-extensions\n</code></pre>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n"}},"__N_SSG":true}