{"pageProps":{"news":[{"id":"139","title":"OTP 23 Release Candidate 3","article_date":1587513600000,"lead":"The last release candidate for OTP 23","frontmatter":{"id":"139","title":"OTP 23 Release Candidate 3","lead":"The last release candidate for OTP 23","tags":"releasecandidate","article_date":"2020-04-22T00:00:00Z","created_at":"2020-05-11T08:05:11Z","updated_at":"2020-05-11T08:05:11Z","admin_user_id":"3","visible":"true","article_type_id":"3"},"content":" ## OTP 23 Release Candidate 3\n \nThis is the third and last of three planned release candidates before the OTP 23 release.\n The intention with this release is to get feedback from our users. **All feedback is welcome**, even if it is only to say that it works for you.\n \nErlang/OTP 23 is a new major release with new features, improvements as well as a few incompatibilities.\n ### Highlights (rc3)\n \nApart from the changes below, this third pre-release contains only minor fixes.\n ### Potential Incompatibilities\n * SSL: * Support for SSL 3.0 is completely removed.\n* TLS 1.3 is added to the list of default supported versions.\n* `erl_interface`: Removed the deprecated parts of `erl_interface`\n (`erl_interface.h` and essentially all C functions with prefix `erl_`).\n* The deprecated `erlang:get_stacktrace/0` BIF now returns an empty list instead of a stacktrace.\n `erlang:get_stacktrace/0` is scheduled for removal in OTP 24.\n* ...\n ### Highlights (rc2)\n * **ssh**: * OpenSSH 6.5 introduced a new file representation of\n keys called `openssh-key-v1`. This is now supported with the exception of\n handling encrypted keys.\n* Algorithm configuration could now be done in a .config file.\n This is useful for example to enable an algorithm that\n is disabled by default without need to change the code.\n* **ssl**: * Support for the middlebox compatibility mode makes the TLS 1.3 handshake\n look more like a TLS 1.2 handshake and increases the chance of successfully\n establishing TLS 1.3 connections through legacy middleboxes.\n* Add support for key exchange with Edward curves and PSS-RSA padding in\n signature verification\n* The possibility to run Erlang distribution without\n relying on EPMD has been extended. To achieve this a\n couple of new options to the inet distribution has been\n added. * `-dist_listen false` Setup the distribution\n channel, but do not listen for incoming connection.\n* `-erl_epmd_port Port` Configure a default port that\n the built-in EPMD client should return.\n* ...\n* A first EXPERIMENTAL `socket` backend to\n `gen_tcp` and `inet` has been implemented. `gen_udp` and `gen_sctp` will follow.\n Putting `{inet_backend, socket}` as first option to `listen()` or `connect()` makes it easy to try this for\n existing code\n ### Highlights (rc1)\n * A new module `erpc` in kernel which implements an enhanced subset of the operations provided by the `rpc` module. Enhanced in the sense that it makes it possible to distinguish between returned value, raised exceptions and other errors. `erpc` also has better performance and scalability than the original `rpc` implementation. This by utilizing the newly introduced `spawn_request()` BIF. Also the `rpc` module benefits from these improvements by utilizing `erpc` when possible.\n* Scalability and performance Improvements plus new functionality regarding distributed spawn operations.\n* In binary matching, the size of the segment to be matched is now allowed to be a guard expression (EEP-52)\n* When matching with maps the keys can now be guard expressions (EEP-52).\n* ssh: support for TCP/IP port forwarding, a.k.a tunneling a.k.a as tcp-forward/direct-tcp is implemented. In the OpenSSH client, this corresponds to the options -L and -R.\n* Allow underscores in numeric literals to improve readability. Examples: `123_456_789`, `16#1234_ABCD`.\n* New functions in the shell for displaying documentation for Erlang modules, functions and types. The\n functions are: * `h/1,2,3` -- Print the documentation for a `Module:Function/Arity`.\n* `ht/1,2,3` -- Print the type documentation for a `Module:Type/Arity`.\n The embedded documentation is created as docchunks (EEP 48) when building the Erlang/OTP documentation.\n* kernel: The module `pg` with a new implementation of distributed named process groups is introduced. The old module `pg2` is deprecated and scheduled for removal in OTP 24.\n* Our tool chain for building the Windows packages is upgraded with new C++ compiler, Java compiler, OpenSSL libraries and wxWidgets versions. We are now using WSL (the Linux Subsystem for Windows when building) which makes it easier to handle the build environment.\n* ...\n \nFor more details see\n [http://erlang.org/download/otp_src_23.0-rc3.readme](http://erlang.org/download/otp_src_23.0-rc3.readme)\n \nPre built versions for Windows can be fetched here:\n [http://erlang.org/download/otp_win32_23.0-rc3.exe](http://erlang.org/download/otp_win32_23.0-rc3.exe)\n [http://erlang.org/download/otp_win64_23.0-rc3.exe](http://erlang.org/download/otp_win64_23.0-rc3.exe)\n \nOnline documentation can be browsed here:\n [http://erlang.org/documentation/doc-11.0-rc3/doc](http://erlang.org/documentation/doc-11.0-rc3/doc)\n The Erlang/OTP source can also be found at GitHub on the official Erlang repository,\n [https://github.com/erlang/otp](https://github.com/erlang/otp)\n ","tags":["releasecandidate"]},{"id":"128","title":"Erlang OTP 22.0-rc2 is available for testing!","article_date":1553644800000,"lead":"Erlang/OTP 22 Release Candidate 2 is available for testing","frontmatter":{"id":"128","title":"Erlang OTP 22.0-rc2 is available for testing!","lead":"Erlang/OTP 22 Release Candidate 2 is available for testing","twitter_status":"Erlang/OTP 22, a new new!","tags":"releasecandidate, rc, release","article_date":"2019-03-27T00:00:00Z","created_at":"2019-03-26T12:21:18Z","updated_at":"2019-03-26T15:47:52Z","admin_user_id":"3","visible":"true","article_type_id":"3"},"content":"# OTP 22 Release Candidate 2\n\nThis is the second of three planned release candidates before the OTP 22 release.\n\nThe intention with this release is to get feedback from our users. All feedback is welcome, even if it is only to say that it works for you, as it lets us know that the release candidate got some testing.\n\nErlang/OTP 22 is a new major release with new features and improvements as well as incompatibilities.\n## Potential Incompatibilities\n* gen_* behaviours: If logging of the last N messages through sys:log/2,3 is active for the server, this log is included in the terminate report.\n* reltool: A new element, Opts, can now be included in a rel tuple in the reltool release specific configuration format: {rel, Name, Vsn, RelApps, Opts}.\n* All external pids/ports/refs created by erlang:list_to_pid and similar functions now compare equal to any other pid/port/ref with same number from that node.\n* The old legacy erl_interface library is deprecated as of OTP 22, and will be removed in OTP 23. This does not apply to the ei library.\n* VxWorks is deprecated as of OTP 22 and will be removed in OTP 23.\n## Additional highlights in release candidate 2\n* A simple socket API is provided through the socket module. This is a low level API that does *not* replace gen_[tcp|udp|sctp]. It is intended to *eventually* replace the inet driver. It also provides a basic API that facilitates the implementation of other protocols than TCP, UDP and SCTP. Known issues are; No support for the Windows OS (currently), a small term leakage. This feature will be classed as experimental in OTP 22.\n* ssl: Basic support for TLS 1.3 Server for experimental use.\n* In OTP 22, HiPE (the native code compiler) is not fully functional. The reasons for this are new BEAM instructions for binary matching that the HiPE native code compiler does not support. If erlc is invoked with the +native option, and if any of the new binary matching instructions are used, the compiler will issue a warning and produce a BEAM file without native code.\n* erts: Added the NIF function enif_term_type, which helps avoid long sequences of enif_is_xyz by returning the type of the given term. This is especially helpful for NIFs that serialize terms, such as JSON encoders, where it can improve both performance and readability.\n* crypto: The new hash_info/1 and cipher_info/1 functions returns maps with information about the hash or cipher in the argument.\n## Highlights in release candidate 1\n### Erts:\n* Support for Erlang Distribution protocol to split the payload of large signals into several fragments.\n* ETS option write_concurrency now also effects and improves scalability of ordered_set tables.\n* The length/1 BIF used to calculate the length of the list in one go without yielding, even if the list was very long. Now it yields when called with long lists.\n* A new (still experimental) module socket is introduced. It is implemented as a NIF and the idea is that it shall be as \"close as possible\" to the OS level socket interface.\n### Compiler:\n* The compiler has been rewritten to internally use an intermediate representation based on Static Single Assignment (SSA). The new intermediate representation makes more optimizations possible. * The binary matching optimizations are now applicable in many more circumstances than before.\n* Type optimizations are now applied across local function calls, and will remove a lot more redundant type tests than before.\n* All compiler options that can be given in the source file can now be given in the option list on the command line for erlc.\n### Standard libraries:\n* Cover now uses the counters module instead of ets for updating counters. The new function cover:local_only/0 allows running Cover in a restricted but faster local-only mode. The increase in speed will vary depending on the type of code being cover-compiled, as an example the compiler test suite runs more than twice as fast with the new Cover.\n* SSL now uses the new logger API, including log levels and verbose debug logging.\n\nFor more details see\n [http://erlang.org/download/otp_src_22.0-rc2.readme](http://erlang.org/download/otp_src_22.0-rc2.readme)\n\nPre built versions for Windows can be fetched here:\n [http://erlang.org/download/otp_win32_22.0-rc2.exe](http://erlang.org/download/otp_win32_22.0-rc2.exe)\n [http://erlang.org/download/otp_win64_22.0-rc2.exe](http://erlang.org/download/otp_win64_22.0-rc2.exe)\n\nOnline documentation can be browsed here:\n [http://erlang.org/documentation/doc-11.0-rc2/doc](http://erlang.org/documentation/doc-11.0-rc2/doc)\n\nThe Erlang/OTP source can also be found at GitHub on the official Erlang repository:\n\n[https://github.com/erlang/otp](https://github.com/erlang/otp)\n\n[OTP-22.0-rc2](https://github.com/erlang/otp/releases/tag/OTP-22.0-rc2)\n\n \n\nThank you for all your contributions!\n","tags":["releasecandidate","rc","release"]},{"id":"126","title":"Erlang OTP 22.0-rc1 is available for testing!","article_date":1550016000000,"lead":"Erlang/OTP 22 Release Candidate 1 is available for testing","frontmatter":{"id":"126","title":"Erlang OTP 22.0-rc1 is available for testing!","lead":"Erlang/OTP 22 Release Candidate 1 is available for testing","twitter_status":"Erlang/OTP 22, try it before it is old!","tags":"releasecandidate, rc, release","article_date":"2019-02-13T00:00:00Z","created_at":"2019-02-26T12:00:39Z","updated_at":"2019-02-28T10:43:54Z","admin_user_id":"3","visible":"true","article_type_id":"3"},"content":"# OTP 22 Release Candidate 1\n\nThis is the first of three planned release candidates before the OTP 22 release.\n\nThe intention with this release is to get feedback from our users. All feedback is welcome, even if it is only to say that it works for you, as it lets us know that the release candidate got some testing.\n\nErlang/OTP 22 is a new major release with new features and improvements as well as incompatibilities.\n## Potential Incompatibilities\n* gen_* behaviours: If logging of the last N messages through sys:log/2,3 is active for the server, this log is included in the terminate report.\n* New element, Opts, can now be included in a rel tuple in the reltool release specific configuration format: {rel, Name, Vsn, RelApps, Opts}.\n* All external pids/ports/refs created by erlang:list_to_pid and similar functions now compare equal to any other pid/port/ref with same number from that node.\n* The old legacy erl_interface library is deprecated as of OTP 22, and will be removed in OTP 23. This does not apply to the ei library.\n* VxWorks is deprecated as of OTP 22 and will be removed in OTP 23.\n## Known problems\n\nNative code generation does not work for all modules due to new BEAM instructions not supported by HiPE the native compiler. However, dialyzer's automatic compilation to native code still works. Building OTP with the configure option enable-native-libs will not work in this release candidate.\n## Highlights\n### Erts:\n* Support for Erlang Distribution protocol to split the payload of large signals into several fragments.\n* ETS option write_concurrency now also effects and improves scalability of ordered_set tables.\n* The length/1 BIF used to calculate the length of the list in one go without yielding, even if the list was very long. Now it yields when called with long lists.\n* A new (still experimental) module socket is introduced. It is implemented as a NIF and the idea is that it shall be as \"close as possible\" to the OS level socket interface.\n### Compiler:\n* The compiler has been rewritten to internally use an intermediate representation based on Static Single Assignment (SSA). The new intermediate representation makes more optimizations possible. * The binary matching optimizations are now applicable in many more circumstances than before.\n* Type optimizations are now applied across local function calls, and will remove a lot more redundant type tests than before.\n* All compiler options that can be given in the source file can now be given in the option list on the command line for erlc.\n### Standard libraries:\n* Cover now uses the counters module instead of ets for updating counters. The new function cover:local_only/0 allows running Cover in a restricted but faster local-only mode. The increase in speed will vary depending on the type of code being cover-compiled, as an example the compiler test suite runs more than twice as fast with the new Cover.\n* SSL now uses the new logger API, including log levels and verbose debug logging.\n\nFor more details see\n [http://erlang.org/download/otp_src_22.0-rc1.readme](http://erlang.org/download/otp_src_22.0-rc1.readme)\n\nPre built versions for Windows can be fetched here:\n [http://erlang.org/download/otp_win32_22.0-rc1.exe](http://erlang.org/download/otp_win32_22.0-rc1.exe)\n [http://erlang.org/download/otp_win64_22.0-rc1.exe](http://erlang.org/download/otp_win64_22.0-rc1.exe)\n\nOnline documentation can be browsed here:\n [http://erlang.org/documentation/doc-11.0-rc1/doc](http://erlang.org/documentation/doc-11.0-rc1/doc)\n\nThe Erlang/OTP source can also be found at GitHub on the official Erlang repository:\n\n[https://github.com/erlang/otp](https://github.com/erlang/otp)\n\n[OTP-22.0-rc1](https://github.com/erlang/otp/releases/tag/OTP-22.0-rc1)\n\n \n\nThank you for all your contributions!\n\n \n","tags":["releasecandidate","rc","release"]}],"tags":{"release":16,"OTP 23":1,"releasecandidate":3,"candidate":2,"testing":2,"workshop":1,"rc":2,"Workshop":1,"EUC CodeBEAMSTO":1,"release candidate":2,"blog anniversary":1,"Erlang":1,"OTP":1,"security":1,"report":1,"bug":1}},"__N_SSG":true}