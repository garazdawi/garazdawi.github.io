{"pageProps":{"index":{"id":"0006","content":"<pre><code>Author: Bj√∂rn Gustavsson &lt;bjorn(at)erlang(dot)org&gt;\nStatus: Final/R12B-0 Proposal is implemented in OTP release R12B-0\nType: Standards Track\nCreated: 10-Aug-2007\nErlang-Version: R12B-0\nPost-History:\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 6: <a href=\"eep-0006.md\" title=\"EEP Source\"> New BIFs for tuple and binary sizes</a></h2>\n\n<h1>Abstract</h1>\n\n<p>This EEP describes the two new guards BIFs <code>tuple_size/1</code>  and <code>byte_size/1</code>\nas a prefered alternative to the  <code>size/1</code> BIF.</p>\n\n<h1>Specifications</h1>\n\n<pre><code>byte_size/1::bitstring() -&gt; integer()\n</code></pre>\n\n<p>Returns the number of bytes needed to store the entire <em>bitstring</em>\n(see <a href=\"eep-0004.md\" title=\"EEP 4\">EEP 4</a>). This BIF will return the same value as\n<code>(bit_size(Bin)+7) div 8</code> (that is, the number of bytes will be\nrounded up if number of bits is not evenly divisible by 8).\nThis BIF is allowed in guards.</p>\n\n<pre><code>tuple_size/1::tuple() -&gt; integer()\n</code></pre>\n\n<p>Returns the size of a tuple. This BIF will fail if passed anything\nthat is not a tuple. This BIF is allowed in guards.</p>\n\n<h1>Rationale</h1>\n\n<p>The <code>size/1</code> BIF accepts either a binary or a tuple, and returns\neither the size of binary in bytes or the size of the tuple.</p>\n\n<p>Because <code>size/1</code> accepts two different types, it is difficult to\noptimize uses of it, both in the compiler and in the run-time system.\nAdding the two new BIF will faciliate optimization, and will also\nhelp Dialyzer.</p>\n\n<p>It could be argued that <code>byte_size/1</code> should only work for\nbinaries (bitstrings whose size in bits is disivible by 8) to catch\nthe bug that the code cannot handle general bitstrings and still does not\nuse an <code>is_binary/1</code> guard test. In my opinion, if the programmer\nmust round up the result from <code>bit_size/1</code> to a whole number of bytes,\nhe or she is more likely to get <em>that</em> wrong: The \"obvious\" expressions\n<code>bit_size(B) / 8 + 1</code> or <code>bit_size(B) div 8 + 1</code> are both wrong,\nand the correct expression <code>(bit_size(B)+7) div 8</code> is not immediately\nobvious.</p>\n\n<h1>Implementation</h1>\n\n<p>The implementation is trivial.</p>\n\n<h1>Backwards Compatibility</h1>\n\n<p>Code containing local functions named <code>tuple_size/1</code> or <code>byte_size/1</code>\nneed to be changed.</p>\n\n<p>The compiler will issue a warning that <code>size/1</code> is deprecated\nand will be removed in R14B for code that uses <code>size/1</code>.</p>\n"}},"__N_SSG":true}