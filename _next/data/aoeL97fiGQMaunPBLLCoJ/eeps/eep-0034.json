{"pageProps":{"index":{"id":"0034","content":"<pre><code>Author: Tony Rogvall &lt;tony(at)rogvall(dot)se&gt;\nStatus: Draft\nType: Standards Track\nCreated: 31-Aug-2010\nErlang-Version: R14B\nPost-History:\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 34: <a href=\"eep-0034.md\" title=\"EEP Source\"> Extended basic packet options for decode_packet</a></h2>\n\n<h1>Abstract</h1>\n\n<p>This EEP decribes new basic packet options that is used by the\n<code>gen_tcp</code> which are also present, and the same, as in the\n<code>erlang:decode_packet</code>.</p>\n\n<h1>Rationale</h1>\n\n<p>Current packet options used in <code>erlang:decode_packet</code> cover a range of\npacket types.  The basic ones are <code>{packet,0}</code>, <code>{packet,1}</code>,\n<code>{packet,2}</code>, and <code>{packet,4}</code>.  On outbound traffic from <code>gen_tcp</code>\nthese options prefix the packets with <code>N</code> extra bytes containing an\ninteger in big endian format containg the size of the data.</p>\n\n<p>When communicating with end points implemented by other party it is\nnot always possible to suggest that packet length is present in\nbig endian format or that it is 4 bytes.  Today with 64-bit machine\nshowing up it may even be possible that we soon find protocols sending\nplain machine dependent 64-bit words as packet length descriptors.</p>\n\n<h1>New packet types</h1>\n\n<p>This EEP suggest to extend the packet bytes to the range 0-8.  Note\nthat the internal maximum packet size is not affected by this EEP,\nonly the format of the packet size indicator.</p>\n\n<p>Furthermore a negative range is suggested to signal little endian\nformated size indicator in range -1 .. -8.  <code>{packet,-1}</code> is\nequivalent with <code>{packet,1}</code>.  The number of packets bytes prefixed is\nthus <code>abs(PBytes)</code> where <code>PBytes</code> is in range -8 .. 8.</p>\n\n<p>This EEP also suggest a fixed size packet mode, expressed as <code>{packet,\n{size,N}}</code>.  This mode acts much like <code>{packet,0}</code> in regards to\npacket bytes, no packet bytes are used.  The difference is that, in\n<code>{active,true}</code> or <code>{active,once}</code> mode, while <code>{packet,0}</code> collects\nany data available, the <code>{packet,{size,N}}</code> mode collects exacly <code>N</code>\nbytes before passing it on to the \"owner\" process.  Suggested\nimplementation minimum limitations for <code>N</code> is unsigned 16-bit,\nresulting in a minimum size of 1 and and maximum size of 65535.  A\npacket size of less than 1 should always result in a badarg error.</p>\n\n<h1>Summary</h1>\n\n<p>The packet types suggest by this EEP are:</p>\n\n<ul>\n<li><p><code>{packet,P}</code> <br />\nfor integer <code>P</code> in range -8 .. 8.  This is an extension to the\nexisting integer packet types.</p></li>\n<li><p><code>{packet,{size,N}}</code> <br />\n<code>N</code> is in range > 0 and the maximum <code>N</code> is implementation \ndependent but never less then 65535.</p></li>\n</ul>\n\n<h1>Backward compatiblity</h1>\n\n<p>The author of this EEP has implemented this proposal in the\nErlang/OTP standard git release, and has not found any backwards\ncompatiblity problems.  The files affected by this proposal\nimplementation are: <code>inet_drv.c</code>, <code>packet_parser.c</code>, <code>packet_parser.h</code>\nand <code>erl_bif_port.c</code>.</p>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n"}},"__N_SSG":true}