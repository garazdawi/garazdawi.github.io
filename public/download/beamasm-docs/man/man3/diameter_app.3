.TH diameter_app 3 "diameter 2.2.3" "Ericsson AB" "Erlang Module Definition"
.SH NAME
diameter_app \- 
Callback module of a Diameter application.
.SH DESCRIPTION
.LP
A diameter service as started by diameter:start_service/2 configures one of more Diameter applications, each of whose configuration specifies a callback that handles messages specific to the application\&. The messages and AVPs of the application are defined in a dictionary file whose format is documented in diameter_dict(4) while the callback module is documented here\&. The callback module implements the Diameter application-specific functionality of a service\&.
.LP
A callback module must export all of the functions documented below\&. The functions themselves are of three distinct flavours:
.RS 2
.TP 2
*
peer_up/3 and peer_down/3 signal the attainment or loss of connectivity with a Diameter peer\&.
.LP
.TP 2
*
pick_peer/4, prepare_request/3, prepare_retransmit/3, handle_answer/4 and handle_error/4 are (or may be) called as a consequence of a call to diameter:call/4 to send an outgoing Diameter request message\&.
.LP
.TP 2
*
handle_request/3 is called in response to an incoming Diameter request message\&.
.LP
.RE

.LP
The arities for the the callback functions here assume no extra arguments\&. All functions will also be passed any extra arguments configured with the callback module itself when calling diameter:start_service/2 and, for the call-specific callbacks, any extra arguments passed to diameter:call/4\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIcapabilities() = #diameter_caps{}\fR\&:
A record containing the identities of the local Diameter node and the remote Diameter peer having an established transport connection, as well as the capabilities as determined by capabilities exchange\&. Each field of the record is a 2-tuple consisting of values for the (local) host and (remote) peer\&. Optional or possibly multiple values are encoded as lists of values, mandatory values as the bare value\&.
.TP 2
.B
\fImessage() = diameter_codec:message()\fR\&:
The representation of a Diameter message as passed to diameter:call/4 or returned from a handle_request/3 callback\&.
.TP 2
.B
\fIpacket() = diameter_codec:packet()\fR\&:
A container for incoming and outgoing Diameter messages that\&'s passed through encode/decode and transport\&. Fields should not be set in return values except as documented\&.
.TP 2
.B
\fIpeer_ref() = term()\fR\&:
A term identifying a transport connection with a Diameter peer\&.
.TP 2
.B
\fIpeer() = {peer_ref(), capabilities()}\fR\&:
A tuple representing a Diameter peer connection\&.
.TP 2
.B
\fIstate() = term()\fR\&:
The state maintained by the application callback functions peer_up/3, peer_down/3 and (optionally) pick_peer/4\&. The initial state is configured in the call to diameter:start_service/2 that configures the application on a service\&. Callback functions returning a state are evaluated in a common service-specific process while those not returning state are evaluated in a request-specific process\&.
.RE
.SH EXPORTS
.LP
.B
Mod:peer_up(SvcName, Peer, State) -> NewState
.br
.RS
.LP
Types:

.RS 3
SvcName = diameter:service_name()
.br
Peer = peer()
.br
State = NewState = state()
.br
.RE
.RE
.RS
.LP
Invoked to signal the availability of a peer connection on the local Erlang node\&. In particular, capabilities exchange with the peer has indicated support for the application in question, the RFC 3539 watchdog state machine for the connection has reached state \fIOKAY\fR\& and Diameter messages can be both sent and received\&.
.LP

.RS -4
.B
Note:
.RE
A watchdog state machine can reach state \fIOKAY\fR\& from state \fISUSPECT\fR\& without a new capabilities exchange taking place\&. A new transport connection (and capabilities exchange) results in a new peer_ref()\&.

.LP

.RS -4
.B
Note:
.RE
There is no requirement that a callback return before incoming requests are received: handle_request/3 callbacks must be handled independently of peer_up/3 and peer_down/3\&.

.RE
.LP
.B
Mod:peer_down(SvcName, Peer, State) -> NewState
.br
.RS
.LP
Types:

.RS 3
SvcName = diameter:service_name()
.br
Peer = peer()
.br
State = NewState = state()
.br
.RE
.RE
.RS
.LP
Invoked to signal that a peer connection on the local Erlang node is no longer available following a previous call to peer_up/3\&. In particular, that the RFC 3539 watchdog state machine for the connection has left state \fIOKAY\fR\& and the peer will no longer be a candidate in pick_peer/4 callbacks\&.
.RE
.LP
.B
Mod:pick_peer(LocalCandidates, RemoteCandidates, SvcName, State) -> Selection | false
.br
.RS
.LP
Types:

.RS 3
LocalCandidates = RemoteCandidates = [peer()]
.br
SvcName = diameter:service_name()
.br
State = NewState = state()
.br
Selection = {ok, Peer} | {Peer, NewState}
.br
Peer = peer() | false
.br
.RE
.RE
.RS
.LP
Invoked as a consequence of a call to diameter:call/4 to select a destination peer for an outgoing request\&. The return value indicates the selected peer\&.
.LP
The candidate lists contain only those peers that have advertised support for the Diameter application in question during capabilities exchange, that have not be excluded by a \fIfilter\fR\& option in the call to diameter:call/4 and whose watchdog state machine is in the \fIOKAY\fR\& state\&. The order of the elements is unspecified except that any peers whose Origin-Host and Origin-Realm matches that of the outgoing request (in the sense of a \fI{filter, {all, [host, realm]}}\fR\& option to diameter:call/4) will be placed at the head of the list\&. \fILocalCandidates\fR\& contains peers whose transport process resides on the local Erlang node while \fIRemoteCandidates\fR\& contains peers that have been communicated from other nodes by services of the same name\&.
.LP
A callback that returns a peer() will be followed by a prepare_request/3 callback and, if the latter indicates that the request should be sent, by either handle_answer/4 or handle_error/4 depending on whether or not an answer message is received from the peer\&. If the transport becomes unavailable after prepare_request/3 then a new pick_peer/4 callback may take place to failover to an alternate peer, after which prepare_retransmit/3 takes the place of prepare_request/3 in resending the request\&. There is no guarantee that a pick_peer/4 callback to select an alternate peer will be followed by any additional callbacks since a retransmission to an alternate peer is abandoned if an answer is received from a previously selected peer\&.
.LP
The return values \fIfalse\fR\& and \fI{false, State}\fR\& (that is, \fINewState = State\fR\&) are equivalent, as are \fI{ok, Peer}\fR\& and \fI{Peer, State}\fR\&\&.
.LP

.RS -4
.B
Note:
.RE
The diameter:service_opt() \fIuse_shared_peers\fR\& determines whether or not a service uses peers shared from other nodes\&. If not then \fIRemoteCandidates\fR\& is the empty list\&.

.LP

.RS -4
.B
Warning:
.RE
The return value \fI{Peer, NewState}\fR\& is only allowed if the Diameter application in question was configured with the diameter:application_opt() \fI{call_mutates_state, true}\fR\&\&. Otherwise, the \fIState\fR\& argument is always the initial value as configured on the application, not any subsequent value returned by a peer_up/3 or peer_down/3 callback\&.

.RE
.LP
.B
Mod:prepare_request(Packet, SvcName, Peer) -> Action
.br
.RS
.LP
Types:

.RS 3
Packet = packet()
.br
SvcName = diameter:service_name()
.br
Peer = peer()
.br
Action = Send | Discard | {eval_packet, Action, PostF}
.br
Send = {send, packet() | message()}
.br
Discard = {discard, Reason} | discard
.br
PostF = diameter:eval()}
.br
.RE
.RE
.RS
.LP
Invoked to return a request for encoding and transport\&. Allows the sender to use the selected peer\&'s capabilities to modify the outgoing request\&. Many implementations may simply want to return \fI{send, Packet}\fR\&
.LP
A returned packet() should set the request to be encoded in its \fImsg\fR\& field and can set the \fItransport_data\fR\& field in order to pass information to the transport process\&. Extra arguments passed to diameter:call/4 can be used to communicate transport (or any other) data to the callback\&.
.LP
A returned packet() can set the \fIheader\fR\& field to a \fI#diameter_header{}\fR\& to specify values that should be preserved in the outgoing request, values otherwise being those in the header record contained in \fIPacket\fR\&\&. A returned \fIlength\fR\&, \fIcmd_code\fR\& or \fIapplication_id\fR\& is ignored\&.
.LP
A returned \fIPostF\fR\& will be evaluated on any encoded \fI#diameter_packet{}\fR\& prior to transmission, the \fIbin\fR\& field containing the encoded binary\&. The return value is ignored\&.
.LP
Returning \fI{discard, Reason}\fR\& causes the request to be aborted and the diameter:call/4 for which the callback has taken place to return \fI{error, Reason}\fR\&\&. Returning \fIdiscard\fR\& is equivalent to returning \fI{discard, discarded}\fR\&\&.
.RE
.LP
.B
Mod:prepare_retransmit(Packet, SvcName, Peer) -> Action
.br
.RS
.LP
Types:

.RS 3
Packet = packet()
.br
SvcName = diameter:service_name()
.br
Peer = peer()
.br
Action = Send | Discard | {eval_packet, Action, PostF}
.br
Send = {send, packet() | message()}
.br
Discard = {discard, Reason} | discard
.br
PostF = diameter:eval()}
.br
.RE
.RE
.RS
.LP
Invoked to return a request for encoding and retransmission\&. Has the same role as prepare_request/3 in the case that a peer connection is lost an an alternate peer selected but the argument packet() is as returned by the initial prepare_request/3\&.
.LP
Returning \fI{discard, Reason}\fR\& causes the request to be aborted and a handle_error/4 callback to take place with \fIReason\fR\& as initial argument\&. Returning \fIdiscard\fR\& is equivalent to returning \fI{discard, discarded}\fR\&\&.
.RE
.LP
.B
Mod:handle_answer(Packet, Request, SvcName, Peer) -> Result
.br
.RS
.LP
Types:

.RS 3
Packet = packet()
.br
Request = message()
.br
SvcName = diameter:service_name()
.br
Peer = peer()
.br
Result = term()
.br
.RE
.RE
.RS
.LP
Invoked when an answer message is received from a peer\&. The return value is returned from diameter:call/4 unless the \fIdetach\fR\& option was specified\&.
.LP
The decoded answer record and undecoded binary are in the \fImsg\fR\& and \fIbin\fR\& fields of the argument packet() respectively\&. \fIRequest\fR\& is the outgoing request message as was returned from prepare_request/3 or prepare_retransmit/3\&.
.LP
For any given call to diameter:call/4 there is at most one handle_answer/4 callback: any duplicate answer (due to retransmission or otherwise) is discarded\&. Similarly, only one of handle_answer/4 or handle_error/4 is called\&.
.LP
By default, an incoming answer message that cannot be successfully decoded causes the request process to fail, causing diameter:call/4 to return \fI{error, failure}\fR\& unless the \fIdetach\fR\& option was specified\&. In particular, there is no handle_error/4 callback in this case\&. The diameter:application_opt() \fIanswer_errors\fR\& can be set to change this behaviour\&.
.RE
.LP
.B
Mod:handle_error(Reason, Request, SvcName, Peer) -> Result
.br
.RS
.LP
Types:

.RS 3
Reason = timeout | failover | term()
.br
Request = message()
.br
SvcName = diameter:service_name()
.br
Peer = peer()
.br
Result = term()
.br
.RE
.RE
.RS
.LP
Invoked when an error occurs before an answer message is received in response to an outgoing request\&. The return value is returned from diameter:call/4 unless the \fIdetach\fR\& option was specified\&.
.LP
Reason \fItimeout\fR\& indicates that an answer message has not been received within the time specified with the corresponding diameter:call_opt()\&. Reason \fIfailover\fR\& indicates that the transport connection to the peer to which the request has been sent has become unavailable and that not alternate peer was not selected\&.
.RE
.LP
.B
Mod:handle_request(Packet, SvcName, Peer) -> Action
.br
.RS
.LP
Types:

.RS 3
Packet = packet()
.br
SvcName = term()
.br
Peer = peer()
.br
Action = Reply | {relay, [Opt]} | discard | {eval|eval_packet, Action, PostF}
.br
Reply = {reply, packet() | message()} | {answer_message, 3000\&.\&.3999|5000\&.\&.5999} | {protocol_error, 3000\&.\&.3999}
.br
Opt = diameter:call_opt()
.br
PostF = diameter:eval()
.br
.RE
.RE
.RS
.LP
Invoked when a request message is received from a peer\&. The application in which the callback takes place (that is, the callback module as configured with diameter:start_service/2) is determined by the Application Identifier in the header of the incoming request message, the selected module being the one whose corresponding dictionary declares itself as defining either the application in question or the Relay application\&.
.LP
The argument packet() has the following signature\&.
.LP
.nf

#diameter_packet{header = #diameter_header{},
                 avps   = [#diameter_avp{}],
                 msg    = record() | undefined,
                 errors = [Unsigned32() | {Unsigned32(), #diameter_avp{}}],
                 bin    = binary(),
                 transport_data = term()}

.fi
.LP
The \fImsg\fR\& field will be \fIundefined\fR\& in case the request has been received in the relay application\&. Otherwise it contains the record representing the request as outlined in diameter_dict(4)\&.
.LP
The \fIerrors\fR\& field specifies any results codes identifying errors found while decoding the request\&. This is used to set Result-Code and/or Failed-AVP in a returned answer unless the callback returns a \fI#diameter_packet{}\fR\& whose \fIerrors\fR\& field is set to either a non-empty list of its own, in which case this list is used instead, or the atom \fIfalse\fR\& to disable any setting of Result-Code and Failed-AVP\&. Note that the errors detected by diameter are of the 3xxx and 5xxx series, Protocol Errors and Permanent Failures respectively\&. The \fIerrors\fR\& list is empty if the request has been received in the relay application\&.
.LP
The \fItransport_data\fR\& field contains an arbitrary term passed into diameter from the transport module in question, or the atom \fIundefined\fR\& if the transport specified no data\&. The term is preserved if a message() is returned but must be set explicitly in a returned packet()\&.
.LP
The semantics of each of the possible return values are as follows\&.
.RS 2
.TP 2
.B
\fI{reply, packet() | message()}\fR\&:
Send the specified answer message to the peer\&. In the case of a packet(), the message to be sent must be set in the \fImsg\fR\& field and the \fIheader\fR\& field can be set to a \fI#diameter_header{}\fR\& to specify values that should be preserved in the outgoing answer, appropriate values otherwise being set by diameter\&.
.TP 2
.B
\fI{answer_message, 3000\&.\&.3999|5000\&.\&.5999}\fR\&:
Send an answer message to the peer containing the specified Result-Code\&. Equivalent to
.LP
.nf

{reply, ['answer-message' | Avps]

.fi
.RS 2
.LP
where \fIAvps\fR\& sets the Origin-Host, Origin-Realm, the specified Result-Code and (if the request contained one) Session-Id AVPs, and possibly Failed-AVP as described below\&.
.RE
.RS 2
.LP
Returning a value other than 3xxx or 5xxx will cause the request process in question to fail, as will returning a 5xxx value if the peer connection in question has been configured with the RFC 3588 common dictionary \fIdiameter_gen_base_rfc3588\fR\&\&. (Since RFC 3588 only allows 3xxx values in an answer-message\&.)
.RE
.RS 2
.LP
When returning 5xxx, Failed-AVP will be populated with the AVP of the first matching Result-Code/AVP pair in the \fIerrors\fR\& field of the argument packet(), if found\&. If this is not appropriate then an answer-message should be constructed explicitly and returned in a \fIreply\fR\& tuple instead\&.
.RE
.TP 2
.B
\fI{relay, Opts}\fR\&:
Relay a request to another peer in the role of a Diameter relay agent\&. If a routing loop is detected then the request is answered with 3005 (DIAMETER_LOOP_DETECTED)\&. Otherwise a Route-Record AVP (containing the sending peer\&'s Origin-Host) is added to the request and pick_peer/4 and subsequent callbacks take place just as if diameter:call/4 had been called explicitly\&. The End-to-End Identifier of the incoming request is preserved in the header of the relayed request\&.
.RS 2
.LP
The returned \fIOpts\fR\& should not specify \fIdetach\fR\&\&. A subsequent handle_answer/4 callback for the relayed request must return its first argument, the packet() containing the answer message\&. Note that the \fIextra\fR\& option can be specified to supply arguments that can distinguish the relay case from others if so desired\&. Any other return value (for example, from a handle_error/4 callback) causes the request to be answered with 3002 (DIAMETER_UNABLE_TO_DELIVER)\&.
.RE
.TP 2
.B
\fIdiscard\fR\&:
Discard the request\&. No answer message is sent to the peer\&.
.TP 2
.B
\fI{eval, Action, PostF}\fR\&:
Handle the request as if \fIAction\fR\& has been returned and then evaluate \fIPostF\fR\& in the request process\&. The return value is ignored\&.
.TP 2
.B
\fI{eval_packet, Action, PostF}\fR\&:
Like \fIeval\fR\& but evaluate \fIPostF\fR\& on any encoded \fI#diameter_packet{}\fR\& prior to transmission, the \fIbin\fR\& field containing the encoded binary\&. The return value is ignored\&.
.TP 2
.B
\fI{protocol_error, 3000\&.\&.3999}\fR\&:
Equivalent to \fI{answer_message, 3000\&.\&.3999}\fR\&\&.
.RE
.LP

.RS -4
.B
Note:
.RE
Requests containing errors may be answered by diameter, without a callback taking place, depending on the value of the diameter:application_opt() \fIrequest_errors\fR\&\&.

.RE