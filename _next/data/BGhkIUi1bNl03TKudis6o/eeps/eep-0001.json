{"pageProps":{"index":{"id":"0001","content":"<pre><code>Author: Per Gustafsson &lt;pergu(at)it(dot)uu(dot)se&gt;,\n        Raimo Niskanen &lt;raimo(at)erlang(dot)org&gt;\nStatus: Draft\nType: Process\nCreated: 29-Jan-2007\nPost-History: 29-Jan-2007\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 1: <a href=\"eep-0001.md\" title=\"EEP Source\"> EEP Purpose and Guidelines</a></h2>\n\n<h1>What is an EEP?</h1>\n\n<p>EEP stands for Erlang Extension Proposal, or Erlang Enhancement\nProcess.  It is a concept borrowed from the <a href=\"http://www.python.org\" title=\"We are very grateful to the Python community for devising such a good process for language revisions and for placing their documents in the public domain\">Python</a> language to\nfacilitate community involvement in developing Erlang.  This document\nis heavily based on <a href=\"http://www.python.org/dev/peps/pep-0001/\" title=\"PEP 1, PEP Purpose and Guidelines, Goodger, Hylton, Warsaw\">PEP 1</a>.  An EEP is a design document providing\ninformation to the Erlang community, or describing a new feature for\nErlang or its processes or environment.  The EEP should provide a\nconcise technical specification of the feature and a rationale for the\nfeature.</p>\n\n<p>We intend EEPs to be the primary mechanisms for proposing new\nfeatures, for collecting community input on an issue, and for\ndocumenting the design decisions that have gone into Erlang.  The EEP\nauthor is responsible for building consensus within the community and\ndocumenting dissenting opinions.</p>\n\n<p>Because the EEPs are maintained as text files in a versioned\nrepository, their <a href=\"http://www.github.com/erlang/eep/\" title=\"EEP Sources at Github\">revision history</a> is the historical record of\nthe feature proposal.</p>\n\n<h1>EEP Types</h1>\n\n<p>There are two kinds of EEPs:</p>\n\n<ol>\n<li><p>A <strong>Standards Track</strong> EEP describes a new feature or implementation\nfor Erlang.</p></li>\n<li><p>A <strong>Process</strong> EEP describes a process surrounding Erlang, or\nproposes a change to (or an event in) a process.  Process EEPs are \nlike Standards Track EEPs but apply to areas other than the Erlang\nlanguage itself.  They may propose an implementation, but not to\nErlang's codebase; they often require community consensus; they are\nmore than recommendations, and users are typically not free to ignore\nthem.  Examples include release schedules, procedures, guidelines,\nchanges to the decision-making process, and changes to the tools or\nenvironment used in Erlang development.</p></li>\n</ol>\n\n<h1>EEP Work Flow</h1>\n\n<p>The EEP editors assign EEP numbers and change their status.  Please\nsend all EEP-related email to <a href=\"m&#97;&#x69;&#108;&#x74;&#x6F;:&#101;&#101;&#112;&#115;&#64;&#101;&#114;&#108;&#97;ng&#46;&#111;&#114;&#x67;\">&#101;&#101;&#112;&#115;&#64;&#101;&#114;&#108;&#97;ng&#46;&#111;&#114;&#x67;</a>.</p>\n\n<p>The EEP process begins with a new idea for Erlang.  It is highly\nrecommended that a single EEP contain a single key proposal or new\nidea. The more focused the EEP, the more successful it tends to\nbe. The EEP editor reserves the right to reject EEP proposals if they\nappear too unfocused or too broad.  If in doubt, split your EEP into\nseveral well-focused ones.</p>\n\n<p>Each EEP must have a champion -- someone who writes the EEP using the\nstyle and format described below, shepherds the discussions in the\nappropriate forums, and attempts to build community consensus around\nthe idea.  The EEP champion (a.k.a. Author) should first attempt to\nascertain whether the idea is EEP-able.  Posting to the\n<a href=\"&#x6D;&#x61;&#105;&#108;&#x74;&#x6F;:er&#108;&#x61;&#x6E;&#x67;&#x2D;&#x71;u&#x65;&#x73;&#116;&#105;&#111;&#x6E;&#115;&#64;&#x65;&#x72;&#108;a&#x6E;&#x67;&#46;&#111;&#114;&#x67;\">er&#108;&#x61;&#x6E;&#x67;&#x2D;&#x71;u&#x65;&#x73;&#116;&#105;&#111;&#x6E;&#115;&#64;&#x65;&#x72;&#108;a&#x6E;&#x67;&#46;&#111;&#114;&#x67;</a> mailing list is recommended. Small\nenhancements or patches often don't need a EEP and can be injected\ninto the Erlang development work flow by sending a patch to\n<a href=\"&#109;&#x61;&#105;&#x6C;&#116;&#111;:e&#x72;&#x6C;&#x61;&#x6E;&#x67;&#45;&#x70;&#x61;&#x74;&#99;&#104;&#101;&#115;&#64;&#101;&#114;&#x6C;&#x61;&#110;&#103;&#46;&#111;&#x72;&#x67;\">e&#x72;&#x6C;&#x61;&#x6E;&#x67;&#45;&#x70;&#x61;&#x74;&#99;&#104;&#101;&#115;&#64;&#101;&#114;&#x6C;&#x61;&#110;&#103;&#46;&#111;&#x72;&#x67;</a>.</p>\n\n<p>The EEP champion writes a rough but fleshed out draft of the EEP, with\na proposed title. This draft must be written in EEP style as described\nbelow. Then, after subscribing to the email list <a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;:&#101;&#x65;&#x70;&#115;&#64;&#x65;&#x72;&#108;&#97;&#110;&#103;&#x2E;&#x6F;&#114;&#103;\">&#101;&#x65;&#x70;&#115;&#64;&#x65;&#x72;&#108;&#97;&#110;&#103;&#x2E;&#x6F;&#114;&#103;</a>,\nthe EEP champion sends the EEP to that list.  Note that the list has a\nsize limit for posts, at the time of writing 128 KByte, so EEPs with\nattachments that are too large will bounce. Large attachments can be\nput on a suitable web page and then be referred to from the EEP.  If\nthat is not possible, ask on the list how to submit the large EEP in\nquestion.</p>\n\n<p>If the EEP editor approves, she/he will assign the EEP a number, label\nit as Standards Track or Process, give it status \"Draft\", and create\nand check-in the initial draft of the EEP.  The EEP editor will not\nunreasonably deny a EEP.  Reasons for denying EEP status include\nduplication of effort, being technically unsound, not providing proper\nmotivation or addressing backwards compatibility, or not in keeping\nwith the Erlang philosophy.</p>\n\n<p>If a pre-EEP is rejected, the author may elect to take the pre-EEP to\nthe <a href=\"&#x6D;&#x61;&#x69;&#108;&#116;&#111;:&#101;&#x72;&#108;&#x61;&#110;&#x67;&#x2D;&#113;&#117;&#x65;&#115;&#x74;&#x69;&#x6F;&#110;&#x73;&#64;&#101;&#x72;&#x6C;&#x61;&#x6E;&#x67;.&#111;&#114;g\">&#101;&#x72;&#108;&#x61;&#110;&#x67;&#x2D;&#113;&#117;&#x65;&#115;&#x74;&#x69;&#x6F;&#110;&#x73;&#64;&#101;&#x72;&#x6C;&#x61;&#x6E;&#x67;.&#111;&#114;g</a> mailing list to help flesh it out,\ngain feedback and consensus from the community at large, and improve\nthe EEP for re-submission.</p>\n\n<p>The author of the EEP is then responsible for posting the EEP to the\ncommunity forums, and marshaling community support for it.  As updates\nare necessary, the EEP author can check in new versions if they have\ncommit permissions, can email new EEP versions or diffs to the EEP\neditor for committing, or submit changes in any other suitable\nway for the version control system.</p>\n\n<p>Standards Track EEPs consist of two parts, a design document and a\nreference implementation.  The EEP should be reviewed and accepted\nbefore a reference implementation is begun, unless a reference\nimplementation will aid people in studying the EEP.  Standards Track\nEEPs must include an implementation -- in the form of code, a patch,\nor a URL to same -- before it can be considered Final.</p>\n\n<p>EEP authors are responsible for collecting community feedback on a EEP\nbefore submitting it for review.  A EEP that has not been discussed on\nthe erlang mailing list will not be accepted.  However, wherever\npossible, long open-ended discussions on public mailing lists should\nbe avoided.  Strategies to keep the discussions efficient include:\nsetting up a separate SIG mailing list for the topic, having the EEP\nauthor accept private comments in the early design phases, setting up\na wiki page, etc.  EEP authors should use their discretion here.</p>\n\n<p>Once the authors have completed a EEP, they must inform the EEP editor\nthat it is ready for review. EEPs are reviewed by a committee of\npeople from the Erlang/OTP and the Erlang community who may accept or\nreject a EEP or send it back to the author(s) for revision.  For a EEP\nthat is pre-determined to be acceptable (e.g., it is an obvious win\nas-is and/or its implementation has already been checked in) the\nErlang/OTP team may also initiate a EEP review, first notifying the\nEEP author(s) and giving them a chance to make revisions.</p>\n\n<p>The committee members are the internal Erlang/OTP Technical Board plus\nfor the specific case summoned experts.</p>\n\n<p>For a EEP to be accepted it must meet certain minimum criteria. It\nmust be a clear and complete description of the proposed enhancement.\nThe enhancement must represent a net improvement. The proposed\nimplementation, if applicable, must be solid and must not complicate\nthe interpreter unduly. Finally, a proposed enhancement must be\ncompatible with the Erlang philosophy in order to be accepted.</p>\n\n<p>Once a EEP has been accepted, the reference implementation must be\ncompleted. When the reference implementation is complete and accepted,\nthe status will be changed to \"Final\".</p>\n\n<p>A EEP can also be assigned status \"Deferred\". The EEP author or editor\ncan assign the EEP this status when no progress is being made on the\nEEP.  Once a EEP is deferred, the EEP editor can re-assign it to draft\nstatus.</p>\n\n<p>A EEP can also be \"Rejected\". Perhaps after all is said and done it\nwas not a good idea. It is still important to have a record of this\nfact.</p>\n\n<p>EEPs can also be replaced by a different EEP, rendering the original\nobsolete.</p>\n\n<p>EEP work flow is as follows:</p>\n\n<p><img src=\"eep-0001-1.png\" alt=\"EEP Work Flow\" title=\"EEP Work Flow\" /></p>\n\n<p>Some Process EEPs may also have a status of \"Active\"\nif they are never meant to be completed.  E.g. <a href=\"/eeps/eep-0001\" title=\"EEP 1, EEP Purpose and Guidelines, Gustafsson\">EEP 1</a> (this EEP).</p>\n\n<h1>What belongs in a successful EEP?</h1>\n\n<p>Each EEP should have the following parts:</p>\n\n<ol>\n<li><p>Preamble -- RFC 822 style headers containing meta-data about the\nEEP, including the EEP number, a short descriptive title (limited\nto a maximum of 44 characters), the names, and optionally the\ncontact info for each author, etc.</p></li>\n<li><p>Abstract -- a short (~200 word) description of the technical issue\nbeing addressed.</p></li>\n<li><p>Copyright/public domain -- Each EEP must either be explicitly\nlabelled as placed in the public domain (see this EEP as an\nexample) or licensed under the <a href=\"http://www.opencontent.org/openpub/\" title=\"Open Publication License\">Open Publication License</a>, or\nthe <a href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons Attribution 3.0 License\">Creative Commons Attribution 3.0 License</a>.</p></li>\n<li><p>Specification -- The technical specification should describe the\nsyntax and semantics of any new language feature. The\nspecification should be detailed enough to allow competing,\ninteroperable implementations.</p></li>\n<li><p>Motivation -- The motivation is critical for EEPs that want to\nchange the Erlang language. It should clearly explain why the\nexisting language specification is inadequate to address the\nproblem that the EEP solves. EEP submissions without sufficient\nmotivation may be rejected outright.</p></li>\n<li><p>Rationale -- The rationale fleshes out the specification by\ndescribing what motivated the design and why particular design\ndecisions were made.  It should describe alternate designs that\nwere considered and related work, e.g. how the feature is\nsupported in other languages.</p>\n\n<p>The rationale should provide evidence of consensus within the\ncommunity and discuss important objections or concerns raised\nduring discussion.</p></li>\n<li><p>Backwards Compatibility -- All EEPs that introduce backwards\nincompatibilities must include a section describing these\nincompatibilities and their severity.  The EEP must explain how\nthe author proposes to deal with these incompatibilities.  EEP\nsubmissions without a sufficient backwards compatibility treatise\nmay be rejected outright.</p></li>\n<li><p>Reference Implementation -- The reference implementation must be\ncompleted before any EEP is given status \"Final\", but it need not\nbe completed before the EEP is accepted.  It is better to finish\nthe specification and rationale first and reach consensus on it\nbefore writing code.</p>\n\n<p>The final implementation must include test code and documentation\nappropriate for either the Erlang language reference or the\nstandard library reference.</p></li>\n</ol>\n\n<h1>EEP Format and Template</h1>\n\n<p>An EEP is written as an UTF-8-encoded text file in <a href=\"http://daringfireball.net/projects/markdown/\" title=\"Markdown Home Page\">Markdown</a> format.\n<a href=\"/eeps/eep-0033\" title=\"EEP 33, Sample Markdown EEP Template, Niskanen\">EEP 33</a> is a template and contains an instruction of how to write\nan EEP.</p>\n\n<p>In the <a href=\"http://www.github.com/erlang/eep/\" title=\"EEP Sources at Github\">repository</a> there is also a version of the <a href=\"http://daringfireball.net/projects/markdown/\" title=\"Markdown Home Page\">Markdown</a>\nPerl program and a some Perl scripts for building the <a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP index</a>.\nJust give the command <code>./build.pl</code> in the toplevel directory.</p>\n\n<h1>EEP Header Preamble</h1>\n\n<p>Each EEP must begin with an RFC 822 style header preamble all indented\nfour spaces to make them <a href=\"http://daringfireball.net/projects/markdown/\" title=\"Markdown Home Page\">Markdown</a> code style.  The headers must\nappear in the following order.  Headers marked with \"*\" are optional\nand are described below.  All other headers are required:</p>\n\n<pre><code>    Author: &lt;list of authors' real names and optionally, email addrs&gt;\n    * Discussions-To: &lt;email address&gt;\n    Status: &lt;Draft | Active | Accepted | Deferred | Rejected |\n             Final | Replaced&gt;\n    Type: &lt;Standards Track | Process&gt;\n    * Content-Type: &lt;text/plain | text/x-rst&gt;\n    * Requires: &lt;eep numbers&gt;\n    Created: &lt;date created on, in dd-mmm-yyyy format&gt;\n    * Erlang-Version: &lt;version number&gt;\n    Post-History: &lt;dates of postings to erlang-questions&gt;\n    * Replaces: &lt;eep number, ...&gt;\n    * Replaced-By: &lt;eep number, ...&gt;\n</code></pre>\n\n<p>Then follows a Markdown horizontal rule, the EEP number and title\nas a Markdown header 2, and a blank line, all required:\n    <em>*</em>*\n    EEP <eep number>: <eep title>\n    ----</p>\n\n<p>The Author header lists the names, and optionally the email addresses\nof all the authors/owners of the EEP.  The format of the Author header\nvalue must be</p>\n\n<pre><code>Random J. User &lt;address@dom.ain&gt;\n</code></pre>\n\n<p>if the email address is included, and just</p>\n\n<pre><code>Random J. User\n</code></pre>\n\n<p>if the address is not given.</p>\n\n<p>If there are multiple authors, each should be on a separate line\nfollowing RFC 2822 continuation line conventions.  Note that personal\nemail addresses should be obscured as a defense against spam\nharvesters.</p>\n\n<p>While a EEP is in private discussions (usually during the initial\nDraft phase), a Discussions-To header will indicate the mailing list\nor URL where the EEP is being discussed.  No Discussions-To header is\nnecessary if the EEP is being discussed privately with the author, or\non the erlang mailing list.  Remember to obscure email addresses here\nto.</p>\n\n<p>The Type header specifies the type of EEP: Standards Track or Process.</p>\n\n<p>The Created header records the date that the EEP was assigned a\nnumber, while Post-History is used to record the dates of when new\nversions of the EEP are posted to erlang-questions.  Both headers\nshould be in dd-mmm-yyyy format, e.g. 14-Aug-2009.</p>\n\n<p>Standards Track EEPs must have a Erlang-Version header which indicates\nthe version of Erlang that the feature will be released with.  Process\nEEPs do not need a Erlang-Version header.</p>\n\n<p>EEPs may have a Requires header, indicating the EEP numbers that this\nEEP depends on..</p>\n\n<p>EEPs may also have a Replaced-By header indicating that a EEP has been\nrendered obsolete by later EEP(s); the value is the number(s) of the\nEEP(s) that replaces the current document.  The newer EEP(s) must have\na Replaces header containing the number(s) of the EEP(s) that it\nrendered obsolete.</p>\n\n<h1>Auxiliary Files</h1>\n\n<p>EEPs may include auxiliary files such as diagrams.  Such files must be\nnamed <code>eep-XXXX-Y.ext</code>, where \"XXXX\" is the EEP number, \"Y\" is a\nserial number (starting at 1), and \".ext\" is replaced by the actual\nfile extension (e.g. \".png\").</p>\n\n<h1>Reporting EEP Bugs, or Submitting EEP Updates</h1>\n\n<p>How you report a bug, or submit a EEP update depends on several\nfactors, such as the maturity of the EEP, the preferences of the EEP\nauthor, and the nature of your comments. For the early draft stages\nof the EEP, it's probably best to send your comments and changes\ndirectly to the EEP author. For more mature, or finished EEPs you may\nwant to submit corrections to the <a href=\"m&#x61;&#x69;&#108;&#116;&#x6F;:&#101;&#101;&#x70;&#x73;&#64;&#x65;&#114;&#x6C;&#97;&#x6E;&#x67;&#46;&#111;&#114;&#103;\">&#101;&#101;&#x70;&#x73;&#64;&#x65;&#114;&#x6C;&#97;&#x6E;&#x67;&#46;&#111;&#114;&#103;</a> mailing list.</p>\n\n<p>When in doubt about where to send your changes, please check first\nwith the EEP author and/or EEP editor.</p>\n\n<p>EEP authors can update EEPs by submitting new versions to the editors.</p>\n\n<h1>Transferring EEP Ownership</h1>\n\n<p>It occasionally becomes necessary to transfer ownership of EEPs to a\nnew champion.  In general, we'd like to retain the original author as\na co-author of the transferred EEP, but that's really up to the\noriginal author.  A good reason to transfer ownership is because the\noriginal author no longer has the time or interest in updating it or\nfollowing through with the EEP process, or has fallen off the face of\nthe 'net (i.e. is unreachable or not responding to email).  A bad\nreason to transfer ownership is because you don't agree with the\ndirection of the EEP.  We try to build consensus around a EEP, but if\nthat's not possible, you can always submit a competing EEP.</p>\n\n<p>If you are interested in assuming ownership of a EEP, send a message\nasking to take over, addressed to both the original author and the EEP\neditor <a href=\"&#109;a&#105;&#x6C;&#x74;&#111;:e&#101;&#x70;&#115;&#64;&#x65;&#x72;&#x6C;&#x61;&#110;&#x67;&#x2E;&#111;&#114;&#x67;\">e&#101;&#x70;&#115;&#64;&#x65;&#x72;&#x6C;&#x61;&#110;&#x67;&#x2E;&#111;&#114;&#x67;</a>.  If the original author doesn't respond to\nemail in a timely manner, the EEP editor will make a unilateral\ndecision (it's not like such decisions can't be reversed :).</p>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n"}},"__N_SSG":true}