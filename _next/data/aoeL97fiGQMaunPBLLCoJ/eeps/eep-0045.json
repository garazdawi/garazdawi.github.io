{"pageProps":{"index":{"id":"0045","content":"<pre><code>Author: Bj√∂rn Gustavsson &lt;bjorn(at)erlang(dot)org&gt;\nStatus: Accepted/19.0 Proposal is to be implemented in OTP release 19.0\nType: Standards Track\nCreated: 27-Oct-2015\nErlang-Version: R19\nPost-History: 29-Oct-2015, 09-Nov-2015, 11-Nov-2015, 16-Nov-2015\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 45: <a href=\"eep-0045.md\" title=\"EEP Source\"> New macros for function name and arity</a></h2>\n\n<h1>Abstract</h1>\n\n<p>This EEP proposes two new macros called <code>FUNCTION_NAME</code> and\n<code>FUNCTION_ARITY</code> that will return the name and arity, respectively, of\nthe current function.</p>\n\n<h1>Specification</h1>\n\n<p>The new predefined macro <code>FUNCTION_NAME</code> expands to the name of the\ncurrent function (as an atom).  The new predefined macro\n<code>FUNCTION_ARITY</code> expands to arity of the current function (as an\ninteger).  Example:</p>\n\n<pre><code>a_function(_, _) -&gt;\n  {?FUNCTION_NAME,?FUNCTION_ARITY}.\n</code></pre>\n\n<p>After preprocessing, the example will look like:</p>\n\n<pre><code>a_function(_, _) -&gt;\n  {a_function,2}.\n</code></pre>\n\n<p>The preprocessor will expand all other macros before expanding\nthe <code>FUNCTION_NAME</code> and <code>FUNCTION_ARITY</code> macros. So if we have\nthis example:</p>\n\n<pre><code>-define(F, a_function).\n?F(_, _) -&gt;\n  {?FUNCTION_NAME,?FUNCTION_ARITY}.\n</code></pre>\n\n<p>the preprocessor will first expand it to:</p>\n\n<pre><code>a_function(_, _) -&gt;\n  {?FUNCTION_NAME,?FUNCTION_ARITY}.\n</code></pre>\n\n<p>and then to:</p>\n\n<pre><code>a_function(_, _) -&gt;\n  {a_function,2}.\n</code></pre>\n\n<p>The <code>FUNCTION_NAME</code> and <code>FUNCTION_ARITY</code> macros can be used in any\nform that starts with an atom followed by a left parenthesis (when\nall other macros have been expanded).  The macros may be used even in\na function head.  Thus, the following example is legal (albeit not\nvery useful):</p>\n\n<pre><code>a(?FUNCTION_NAME) -&gt; ok.\n</code></pre>\n\n<p>It will be expanded to:</p>\n\n<pre><code>a(a) -&gt; ok.\n</code></pre>\n\n<p>The <code>FUNCTION_NAME</code> and <code>FUNCTION_ARITY</code> macros will also work in the\npresence of other macros in the function head.  Example:</p>\n\n<pre><code>-define(__, _, _).\nb(?FUNCTION_NAME, ?FUNCTION_ARITY, ?__) -&gt;\n   ok.\n</code></pre>\n\n<p>This code will first be expanded to:</p>\n\n<pre><code>b(?FUNCTION_NAME, ?FUNCTION_ARITY, _, _) -&gt;\n   ok.\n</code></pre>\n\n<p>and then to:</p>\n\n<pre><code>b(b, 4, _, _) -&gt;\n  ok.\n</code></pre>\n\n<p>Using <code>FUNCTION_NAME</code> or <code>FUNCTION_ARITY</code> in an attribute will cause a\ncompilation error.  Example:</p>\n\n<pre><code>-attr(?FUNCTION_NAME).\n</code></pre>\n\n<p>The error message will look like this:</p>\n\n<pre><code>example.erl:4: ?FUNCTION_NAME can only be used within a function\n</code></pre>\n\n<p>An invocation of <code>FUNCTION_NAME</code> or <code>FUNCTION_ARITY</code> must not begin a\nform.  Therefore, the following example is illegal:</p>\n\n<pre><code>?FUNCTION_NAME() -&gt; ok.\n</code></pre>\n\n<p>The error message will look like this:</p>\n\n<pre><code>example.erl:4: ?FUNCTION_NAME must not begin a form\n</code></pre>\n\n<h2>Implementation Requirements</h2>\n\n<p>This EEP does not specify exactly how the <code>FUNCTION_NAME</code> and\n<code>FUNCTION_ARITY</code> macros should be implemented, but it does impose some\nrequirements on the implementation:</p>\n\n<ul>\n<li><p>The implementation must be efficient.  In particular, there should\nnot be any noticeable slowdowns for modules that don't use the\n<code>FUNCTION_NAME</code> or <code>FUNCTION_ARITY</code> macros.</p></li>\n<li><p>The expansion of <code>FUNCTION_NAME</code> and <code>FUNCTION_ARITY</code> must be done\nby the <code>epp</code> module.  Postponing expansion of the macros to a later\ncompiler pass is not acceptable, as it could cause compatibility\nissues with parse transforms and other tools that operate on the\nabstract format.</p></li>\n</ul>\n\n<h2>Examples</h2>\n\n<pre><code>-define(FUNCTION_STRING, atom_to_list(?FUNCTION_NAME) ++ \"/\" ++\n          integer_to_list(?FUNCTION_ARITY)).\n\ntest() -&gt;\n  ?FUNCTION_STRING.\n</code></pre>\n\n<p>The <code>test/0</code> function will return <code>\"test/0\"</code>.  Note that the\nBEAM compiler will evaluate constant expressions at compilation time;\nthus, <code>FUNCTION_STRING</code> will be turned into a string literal\nduring compilation.</p>\n\n<pre><code>c() -&gt;\n  F = fun() -&gt; ?FUNCTION_NAME end,\n  F().\n</code></pre>\n\n<p>The <code>c/0</code> function will return <code>c</code>.</p>\n\n<p>The macros can be used when creating a fun that refers to the\ncontaining function:</p>\n\n<pre><code>self_ref(Data, Handler) -&gt;\n    ...\n    Handler(Data, fun ?FUNCTION_NAME/?FUNCTION_ARITY)\n    ...\n</code></pre>\n\n<h1>Motivation</h1>\n\n<p>Many users have asked for some sort of macro that could return the\nname of the current function, similar to <code>FILE</code>, <code>LINE</code>, and <code>MODULE</code>.\nFor example: <a href=\"http://erlang.org/pipermail/erlang-questions/2007-September/029387.html\" title=\"Why no ?FUNCTION macro\">Why no ?FUNCTION macro</a>.</p>\n\n<p>The most common use case for a function name macro seems to be for\nlogging information to a log file.  Possible workarounds include using\na parse transform, using <code>process_info/2</code>, or generating and catching\nan exception.  Unless the application needs a parse transform for some\nother reason, implementing a parse transform just to catch the name of\nthe current function is cumbersome.  The other workarounds have\nrun-time penalties.</p>\n\n<h1>Rationale</h1>\n\n<h2>Why not only a single <code>FUNCTION</code> macro?</h2>\n\n<p>In order to minimize the pollution of the namespace of preprocessor\nsymbols, should there not be only a single <code>FUNCTION</code> macro that would\nreturn a tuple with the name and arity of the current function?</p>\n\n<p>It would certainly be possible, but many common use cases would be\nsomewhat cumbersome:</p>\n\n<pre><code>io:format(\"~p/~p: ~s\\n\", [element(1, ?FUNCTION),\n                          element(2, ?FUNCTION),\n                          Message])\n</code></pre>\n\n<p>Compare that to the more readable:</p>\n\n<pre><code>io:format(\"~p/~p: ~s\\n\", [?FUNCTION_NAME,\n                          ?FUNCTION_ARITY,\n                          Message])\n</code></pre>\n\n<p>There are also contexts where <code>element(1, ?FUNCTION)</code> or <code>element(2,\n?FUNCTION)</code> would be illegal, for example in function heads or after\nthe <code>fun</code> keyword.  The following example would fail to compile:</p>\n\n<pre><code>fun element(1, ?FUNCTION)/element(2, ?FUNCTION)\n</code></pre>\n\n<h2>Why do I have to define <code>FUNCTION_STRING</code> myself?</h2>\n\n<p>The most important reason is that there are <em>two</em> reasonable\ndefinitions:</p>\n\n<pre><code>-define(FUNCTION_STRING,\n   atom_to_list(?FUNCTION_NAME) ++ \"/\" ++\n   integer_to_list(?FUNCTION_ARITY)).\n</code></pre>\n\n<p>and</p>\n\n<pre><code>-define(FUNCTION_STRING,\n   ?MODULE_STRING ++ \":\" ++\n   atom_to_list(?FUNCTION_NAME) ++ \"/\" ++\n   integer_to_list(?FUNCTION_ARITY)).\n</code></pre>\n\n<p>There is no run-time penality for defining <code>FUNCTION_STRING</code>\nyourself, as the compiler will turn either definition of\n<code>FUNCTION_STRING</code> into a literal string during compilation.</p>\n\n<p>Another reason is to avoid polluting the macro namespace with\nmore predefined macros than strictly needed.</p>\n\n<p>Historical note: <code>MODULE_STRING</code> was added as an optimization in OTP\nR7B, because at the time the compiler did not optimize constant\nexpressions as well as it does now.</p>\n\n<h2>Why are <code>FUNCTION_NAME</code> and <code>FUNCTION_ARITY</code> allowed in function heads?</h2>\n\n<p>I cannot see any practical use for the <code>FUNCTION_NAME</code> and\n<code>FUNCTION_ARITY</code> macro in a function head.  Only allowing them to be\nused in function bodies would make sense.  But consider this example:</p>\n\n<pre><code>f(a, _) -&gt;\n  ok;\nf(?FUNCTION_NAME, ?FUNCTION_ARITY) -&gt;\n  ok.\n</code></pre>\n\n<p>To be able to reject invocations of <code>FUNCTION_NAME</code> and\n<code>FUNCTION_ARITY</code> in clauses other than the first, the preprocessor\nmust basically be able to parse arbitrary Erlang code.  The only\npractical solution would be to use the existing parser in the\n<code>erl_parse</code> module.  That would slow down the preprocessor without\nproviding any additional benefit.</p>\n\n<h1>Backwards Compatibility</h1>\n\n<p>Modules that define either <code>FUNCTION_NAME</code> or <code>FUNCTION_ARITY</code> will\nfail to compile with a message similar to this:</p>\n\n<pre><code>example.erl:4: redefining predefined macro 'FUNCTION_NAME'\n</code></pre>\n\n<p>Similarly, attempting to define <code>FUNCTION_NAME</code> or <code>FUNCTION_ARITY</code>\nfrom the command line using <code>-D</code> will also fail.</p>\n\n<h1>Implementation</h1>\n\n<p>The reference implementation has essentially zero extra cost for\nfunctions that do not use the <code>FUNCTION_NAME</code> or <code>FUNCTION_ARITY</code>\nmacros.  The preprocessor will only start scanning to determine the\nname and arity of the current function when an invocation of either\n<code>FUNCTION_NAME</code> or <code>FUNCTION_ARITY</code> has been seen.  The scanning will\nstop as soon as the right parenthesis at the end of the argument list\nis found.  The name and arity will be saved and reused if another of\ninvocation of <code>FUNCTION_NAME</code> or <code>FUNCTION_ARITY</code> is seen in the same\nfunction definition.</p>\n\n<p>The reference implementation can be fetched from Github like this:</p>\n\n<pre><code>git fetch git://github.com/bjorng/otp.git bjorn/function-macro\n</code></pre>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n"}},"__N_SSG":true}