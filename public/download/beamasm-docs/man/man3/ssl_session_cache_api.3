.TH ssl_session_cache_api 3 "ssl 10.0" "Ericsson AB" "Erlang Module Definition"
.SH NAME
ssl_session_cache_api \- TLS session cache API
.SH DESCRIPTION
.LP
Defines the API for the TLS session cache so that the data storage scheme can be replaced by defining a new callback module implementing this API\&.
.SH DATA TYPES
.nf

\fBsession_cache_ref()\fR\& = any()
.br
.fi
.nf

\fBsession_cache_key()\fR\& = {partial_key(), ssl:session_id()}
.br
.fi
.RS
.LP
A key to an entry in the session cache\&.
.RE
.nf

\fBpartial_key()\fR\&
.br
.fi
.RS
.LP
The opaque part of the key\&. Does not need to be handled by the callback\&.
.RE
.nf

\fBsession()\fR\&
.br
.fi
.RS
.LP
The session data that is stored for each session\&.
.RE
.SH EXPORTS
.LP
.B
delete(Cache, Key) -> _
.br
.RS
.LP
Types:

.RS 3
Cache =  session_cache_ref() 
.br
Key = session_cache_key() 
.br
.RE
.RE
.RS
.LP
Deletes a cache entry\&. Is only called from the cache handling process\&.
.RE
.LP
.B
foldl(Fun, Acc0, Cache) -> Acc
.br
.RS
.LP
Types:

.RS 3
Fun = fun()
.br
Acc0 = Acc = term()
.br
Cache =  session_cache_ref() 
.br
.RE
.RE
.RS
.LP
Calls \fIFun(Elem, AccIn)\fR\& on successive elements of the cache, starting with \fIAccIn == Acc0\fR\&\&. \fIFun/2\fR\& must return a new accumulator, which is passed to the next call\&. The function returns the final value of the accumulator\&. \fIAcc0\fR\& is returned if the cache is empty\&.
.RE
.LP
.B
init(Args) -> Cache 
.br
.RS
.LP
Types:

.RS 3
Cache =  session_cache_ref() 
.br
Args = proplists:proplist()
.br
.RE
.RE
.RS
.LP
Includes property \fI{role, client | server}\fR\&\&. Currently this is the only predefined property, there can also be user-defined properties\&. See also application environment variable session_cb_init_args\&.
.LP
Performs possible initializations of the cache and returns a reference to it that is used as parameter to the other API functions\&. Is called by the cache handling processes \fIinit\fR\& function, hence putting the same requirements on it as a normal process \fIinit\fR\& function\&. This function is called twice when starting the SSL application, once with the role client and once with the role server, as the SSL application must be prepared to take on both roles\&.
.RE
.LP
.B
lookup(Cache, Key) -> Entry
.br
.RS
.LP
Types:

.RS 3
Cache =  session_cache_ref() 
.br
Key = session_cache_key()
.br
Session = session() | undefined
.br
.RE
.RE
.RS
.LP
Looks up a cache entry\&. Is to be callable from any process\&.
.RE
.LP
.B
select_session(Cache, PartialKey) -> [Session]
.br
.RS
.LP
Types:

.RS 3
Cache =  session_cache_ref() 
.br
PartialKey =  partial_key() 
.br
Session = session()
.br
.RE
.RE
.RS
.LP
Selects sessions that can be reused\&. Is to be callable from any process\&.
.RE
.LP
.B
size(Cache) -> integer()
.br
.RS
.LP
Types:

.RS 3
Cache =  session_cache_ref() 
.br
.RE
.RE
.RS
.LP
Returns the number of sessions in the cache\&. If size exceeds the maximum number of sessions, the current cache entries will be invalidated regardless of their remaining lifetime\&. Is to be callable from any process\&.
.RE
.LP
.B
terminate(Cache) -> _
.br
.RS
.LP
Types:

.RS 3
Cache =  session_cache_ref() 
.br
.RS 2
As returned by init/0
.RE
.RE
.RE
.RS
.LP
Takes care of possible cleanup that is needed when the cache handling process terminates\&.
.RE
.LP
.B
update(Cache, Key, Session) -> _
.br
.RS
.LP
Types:

.RS 3
Cache =  session_cache_ref() 
.br
Key = session_cache_key()
.br
Session = session()
.br
.RE
.RE
.RS
.LP
Caches a new session or updates an already cached one\&. Is only called from the cache handling process\&.
.RE