{"pageProps":{"item":{"id":"115","title":"Erlang/OTP 20.1 is released","article_date":1506470400000,"lead":"Erlang/OTP 20.1 is a service release containing mostly bug fixes and characteristics improvements but also some new features.","frontmatter":{"id":"115","title":"Erlang/OTP 20.1 is released","lead":"Erlang/OTP 20.1 is a service release containing mostly bug fixes and characteristics improvements but also some new features.","tags":"release","article_date":"2017-09-27T00:00:00Z","created_at":"2017-09-27T07:59:56Z","updated_at":"2017-09-27T08:01:38Z","admin_user_id":"3","visible":"true","article_type_id":"3"},"content":"\nErlang/OTP 20.1 is the first service release for the 20 major release.\n The service release contains mostly bug fixes and characteristics improvements but also some new features.\n\nSome highlights for 20.1\n* crypto, public_key: Extend crypto and public_key functions sign and verify with:\n * support for RSASSA-PS padding for signatures and for\n saltlength setting\n* X9.31 RSA padding.\n* sha, sha224, sha256, sha384, and sha512 for dss\n signatures as mentioned in NIST SP 800-57 Part 1.\n* ripemd160 to be used for rsa signatures.\n* A new tuple in `crypto:supports/0` reports supported MAC\n algorithms.\n* diameter:\n * Add service option `decode_format` to allow incoming messages to be decoded into maps\n instead of records.\n* Decode performance has been improved.\n* Add service/transport option avp_dictionaries to give better support for dictionaries only defining AVPs.\n* erts: Upgraded the ERTS internal PCRE library from version 8.40 to version 8.41.\n* erts, kernel, tools: Profiling with lock counting can now be fully toggled at runtime in\n the lock counting emulator (-emu_type lcnt). Everything\n is enabled by default to match the old behavior, but\n specific categories can be toggled at will with minimal\n runtime overhead when disabled. Refer to the\n documentation on�`lcnt:rt_mask/1` for details.\n \n`lcnt:collect` and�`lcnt:clear` will no longer block all\n other threads in the runtime system. This makes it possible to run the lock counting\n under heavier load.\n* erts: The�`zlib` module has been refactored and all its operations will now yield appropriately,\n allowing them to be used freely in concurrent applications.\n* erts, tools: Add�`erlang:iolist_to_iovec/1`, which converts an\n `iolist()` to an�`erlang:iovec()`, which is suitable for use\n with�`enif_inspect_iovec()`.\n* erts: Add new nif API functions for managing an I/O Queue.\n The added functions are:�`enif_ioq_create()`,�`enif_ioq_destroy()`,�`enif_ioq_enq_binary()`,\n `enif_ioq_enqv()`,�`enif_ioq_deq()`,�`enif_ioq_peek()`,�`enif_inspect_iovec()`,�`enif_free_iovec()`\n* observer/crashdump_viewer:\n * Reading of crash dumps with many binaries is optimized.\n* A progress bar is shown when the detail view for a process is opened.\n* The cdv script now sets ERL_CRASH_DUMP_SECONDS=0 to\n avoid generating a new crash dump from the node running the Crashdump Viewer.\n* observer:\n Add system statistics and limits to frontpage in\n observer.\n* public_key, ssl**:\n Improved error propagation and reports\n* ssh: A new option�`modify_algorithms` is implemented. It\n enables specifying changes on the default algorithms\n list. See the reference manual and the SSH User's Guide\n chapter \"Configuring algorithms in SSH\".\n* tools/xref: The predefined Xref analysis locals_not_used now understands\n the�`-on_load()` attribute and does not report unused functions.\n* tools/fprof: When sampling multiple processes and analyzing\n with totals set to true, the output now sums together\n all caller and callee entries which concerns the same\n function. Previous behaviour was to report each\n contributing entry separately.\n\nYou can find the README and the full listing of changes for this service release at\n\n[http://www.erlang.org/download/otp_src_20.1.readme](http://www.erlang.org/download/otp_src_20.1.readme)\n\nThe source distribution and binary distributions for Windows can be\n downloaded from\n\n[http://www.erlang.org/download/otp_src_20.1.tar.gz](http://www.erlang.org/download/otp_src_20.1.tar.gz)\n [http://www.erlang.org/download/otp_win32_20.1.exe](http://www.erlang.org/download/otp_win32_20.1.exe)\n [http://www.erlang.org/download/otp_win64_20.1.exe](http://www.erlang.org/download/otp_win64_20.1.exe)\n\nNote: To unpack the TAR archive you need a GNU TAR compatible program.\n\nFor installation instructions please consult the README file that is part\n of the distribution.\n\nThe Erlang/OTP source can also be found at GitHub on the official Erlang\n repository, [https://github.com/erlang/otp](https://github.com/erlang/otp) with tag OTP-20.1\n\nThe on-line documentation can be found at: [http://www.erlang.org/doc/](http://www.erlang.org/doc/)\n You can also download the complete HTML documentation or the Unix manual files\n\n[http://www.erlang.org/download/otp_doc_html_20.1.tar.gz](http://www.erlang.org/download/otp_doc_html_20.1.tar.gz)\n [http://www.erlang.org/download/otp_doc_man_20.1.tar.gz](http://www.erlang.org/download/otp_doc_man_20.1.tar.gz)\n\nPlease report any new issues via Erlang/OTPs public issue tracker\n\n[https://bugs.erlang.org](https://bugs.erlang.org/)\n\nWe want to thank all of those who sent us patches, suggestions and bug reports!\n\nThank you!\n\nThe Erlang/OTP Team at Ericsson\n","tags":["release"]}},"__N_SSG":true}