{"pageProps":{"index":{"id":"0024","content":"<pre><code>Author: Richard A. O'Keefe &lt;ok(at)cs(dot)otago(dot)ac(dot)nz&gt;\nStatus: Final/R12B-5 Proposal is implemented in OTP release R12B-5\nType: Standards Track\nErlang-Version: R12B-4\nCreated: 22-Sep-2008\nPost-History:\n</code></pre>\n\n<hr />\n\n<h2><a href=\"/eeps/eep-0000\" title=\"EEP Index\">EEP</a> 24: <a href=\"eep-0024.md\" title=\"EEP Source\"> Functions may be named using <code>F/N</code> in all module attributes</a></h2>\n\n<h1>Abstract</h1>\n\n<p>Programmers will be allowed to name functions using the\n<code>F/N</code> form (currently restricted to) <code>-export</code> and <code>-import</code>\nin any module attribute.  The parser will convert this\nto the existing <code>{F,N}</code> form so that downstream tools will\nbe unaffected.</p>\n\n<h1>Specification</h1>\n\n<p>In any module attribute the form <code>F/N</code> (where <code>F</code> is an atom and <code>N</code> is\na non-negative integer) should be converted to <code>{F,N}</code>, provided\nthat it is not in an expression that would be evaluated.</p>\n\n<p>Other occurrences of <code>X/Y</code> are not addressed by this EEP.\nIn particular, occurrences of <code>X/Y</code> in <code>-record</code> or <code>-enum</code>\ndeclarations would be evaluated, so are not affected.</p>\n\n<h1>Motivation</h1>\n\n<p>Compare</p>\n\n<pre><code>-compile({inline,\n    [{ukeymerge3_12,13}, {ukeymerge3_21,13},\n     {rukeymerge3_12a,11}, {rukeymerge3_21a,13},\n     {rukeymerge3_12b,12}, {rukeymerge3_21b,12}]}).\n\n-deprecated(\n    [{new_set,0},{set_to_list,1},{list_to_set,1},{subset,2}]).\n</code></pre>\n\n<p>with</p>\n\n<pre><code>-compile({inline, [\n    rukeymerge3_12a/11,\n    rukeymerge3_12b/12,\n    rukeymerge3_21a/13, \n    rukeymerge3_21b/12,\n    ukeymerge3_12/13,\n    ukeymerge3_21/13]}).\n\n-deprecated([\n    list_to_set/1,\n    new_set/0,\n    set_to_list/1,\n    subset/2]).\n</code></pre>\n\n<p>The improvement in readability is noteworthy, especially if\nauthors switch to the Prolog practice of putting one <code>F/N</code> form\nper line in alphabetic order in such lists.</p>\n\n<p>The improvement in consistency is worth having:  it's no longer a\ncase of <code>new_set/0</code> in an <code>-export</code> or <code>-import</code> module attribute but\n<code>{new_set,0}</code> in a <code>-deprecated</code> module attribute, it's the same in\nall module attributes, making it easier to find those that mention\na particular function.</p>\n\n<h1>Rationale</h1>\n\n<p>Module attributes that contain real expressions, such as <code>-record</code>\n(and, if it is accepted, <code>-enum</code>) require a certain amount of care.\nI did consider allowing the <code>F/N</code> notation everywhere; after all,\nan atom cannot be divided by an integer.  However, with the\n<code>fun F/N</code> form available, there are these days very few occasions\nto refer to a function as <code>{F,N}</code> in an expression.</p>\n\n<p>Otherwise, <code>F/N</code> occurrences in <code>-export</code> and <code>-import</code> attributes are\ncurrently converted to tuples (by farity_list), so this is just a\nsmall matter of extending the notion elsewhere.  I cannot imagine\nwhy this wasn't done years ago.</p>\n\n<h1>Backwards Compatibility</h1>\n\n<p>There are currently no attributes where <code>F/N</code> is accepted,\nis not part of an expression to be evaluated, and does not\nsignify a function, and those where it does signify a function\nalready treat it as an <code>{F,N}</code> tuple.</p>\n\n<p>No existing source code can be affected.</p>\n\n<p>Progams using home-brew front ends instead of the Erlang\nsyntax tools, such as ones that want to preserve white\nspace, comments, and so on, will have to be extended by\ntheir maintainers to recognise the new form.  It is\nalready the case that <code>{fred,3}</code> may be written in two\ndifferent ways in Erlang source form: <code>{fred,+3}</code> is also\nallowed.  So such programs already have to cope with\nmultiple source forms with the same abstract form, and\nthis merely adds one more variant.</p>\n\n<p>Programs generating Erlang source code should some day\nbe revised to generate the new form, but since the old form\nis not being removed and not (in order to preserve the\nvalue of recent books) even being deprecated, need not be.</p>\n\n<h1>Reference Implementation</h1>\n\n<p>A single clause needs to be added to the <code>normalise/1</code>\nfunction in the parse.yrl file:</p>\n\n<pre><code>%% Name/Arity case\nnormalise({op,_,'/',{atom,_,F},{integer,_,I}}) when I &gt;= 0 -&gt;\n   {F,I};\n</code></pre>\n\n<p>just before the final clause, which raises an exception.\nA context diff is provided <a href=\"eep-0024-1.diff\" title=\"Diff to apply to parse.yrl\">eep-0024-1.diff</a>.</p>\n\n<h1>Copyright</h1>\n\n<p>This document has been placed in the public domain.</p>\n"}},"__N_SSG":true}