.TH wxTopLevelWindow 3 "wx 1.9.1" "" "Erlang Module Definition"
.SH NAME
wxTopLevelWindow \- See external documentation: wxTopLevelWindow.
.SH DESCRIPTION
.LP
See external documentation: wxTopLevelWindow\&.
.LP
This class is derived (and can use functions) from: 
.br
wxWindow 
.br
wxEvtHandler 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
wxTopLevelWindow():

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
getIcon(This) -> wxIcon:wxIcon()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getIcons(This) -> wxIconBundle:wxIconBundle()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTitle(This) -> unicode:charlist()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isActive(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
iconize(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
Equivalent to iconize(This, [])\&.
.RE
.LP
.B
iconize(This, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Option = {iconize, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isFullScreen(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isIconized(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isMaximized(This) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
maximize(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
Equivalent to maximize(This, [])\&.
.RE
.LP
.B
maximize(This, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Option = {maximize, boolean()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
requestUserAttention(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
Equivalent to requestUserAttention(This, [])\&.
.RE
.LP
.B
requestUserAttention(This, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Option = {flags, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setIcon(This, Icon) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Icon = wxIcon:wxIcon()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setIcons(This, Icons) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Icons = wxIconBundle:wxIconBundle()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
centerOnScreen(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
Equivalent to centerOnScreen(This, [])\&.
.RE
.LP
.B
centerOnScreen(This, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Option = {dir, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
centreOnScreen(This) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
.RE
.RE
.RS
.LP
Equivalent to centreOnScreen(This, [])\&.
.RE
.LP
.B
centreOnScreen(This, Options::[Option]) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Option = {dir, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setShape(This, Region) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Region = wxRegion:wxRegion()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTitle(This, Title) -> ok
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Title = unicode:chardata()
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
showFullScreen(This, Show) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Show = boolean()
.br
.RE
.RE
.RS
.LP
Equivalent to showFullScreen(This, Show, [])\&.
.RE
.LP
.B
showFullScreen(This, Show, Options::[Option]) -> boolean()
.br
.RS
.LP
Types:

.RS 3
This = wxTopLevelWindow()
.br
Show = boolean()
.br
Option = {style, integer()}
.br
.RE
.RE
.RS
.LP
See external documentation\&.
.RE
.SH AUTHORS
.LP

.I
<>